WEBVTT

00:00:00.001 --> 00:00:04.020
Hello everyone, I'm Chaoyi Lu from Tsinghua

00:00:04.020 --> 00:00:07.000
University, and thanks for joining us.

00:00:07.000 --> 00:00:09.280
In this talk, we will discuss encrypted DNS

00:00:09.280 --> 00:00:11.730
protocols, or what we call here DNS over

00:00:11.730 --> 00:00:13.680
encryption.

00:00:13.680 --> 00:00:16.390
We present a large-scale measurement study on the

00:00:16.390 --> 00:00:18.400
operational status of the protocols,

00:00:18.400 --> 00:00:21.780
from angles of servers, DNS clients, and passive

00:00:21.780 --> 00:00:23.960
traffic, and give an early view into this

00:00:23.960 --> 00:00:25.680
ecosystem.

00:00:25.680 --> 00:00:27.930
The major results in the paper were obtained in

00:00:27.930 --> 00:00:30.760
2019, and in this talk, we will also present

00:00:30.760 --> 00:00:35.640
some more recent updates.

00:00:35.640 --> 00:00:39.330
So today, almost all internet activities start

00:00:39.330 --> 00:00:40.240
with DNS.

00:00:40.240 --> 00:00:43.850
I want to attend this year's IRTF Open Meeting,

00:00:43.850 --> 00:00:47.460
so I need to resolve its website at irtf.org.

00:00:47.460 --> 00:00:51.050
So my DNS queries actually can say something

00:00:51.050 --> 00:00:53.760
about my internet behaviors.

00:00:53.760 --> 00:00:57.130
But there is no confidentiality or authentication

00:00:57.130 --> 00:01:00.120
in DNS, so my queries are susceptible to both

00:01:00.120 --> 00:01:02.960
passive and active attacks.

00:01:02.960 --> 00:01:05.910
For all these people, they can see that I query

00:01:05.910 --> 00:01:08.400
the IRTF domain often, and learn that

00:01:08.400 --> 00:01:12.640
I may be interested in the activities.

00:01:12.640 --> 00:01:15.290
So that was just a juvenile example about DNS

00:01:15.290 --> 00:01:17.800
privacy, but massive DNS surveillance

00:01:17.800 --> 00:01:21.200
and manipulation is not in theory only.

00:01:21.200 --> 00:01:24.260
For example, release documents show that the NSA

00:01:24.260 --> 00:01:26.880
has been monitoring DNS data under secret

00:01:26.880 --> 00:01:28.840
projects.

00:01:28.840 --> 00:01:31.510
And also in the literature, works show that DNS

00:01:31.510 --> 00:01:33.920
data can be used for privacy-threatening

00:01:33.920 --> 00:01:38.560
activities, such as device fingerprinting, user

00:01:38.560 --> 00:01:42.440
tracking, and user behavior analysis.

00:01:42.440 --> 00:01:45.350
So to mitigate DNS privacy issues, one of the

00:01:45.350 --> 00:01:47.960
mainstream solutions is to encrypt DNS

00:01:47.960 --> 00:01:51.620
communications, or what we call here, design DNS

00:01:51.620 --> 00:01:53.920
over encryption protocols.

00:01:53.920 --> 00:01:57.610
Starting from 2009, we see some early protocols

00:01:57.610 --> 00:02:00.320
from the industry, like DNS curve and DNS

00:02:00.320 --> 00:02:01.320
Crypt.

00:02:01.320 --> 00:02:05.120
From around 2014, DNS privacy problems have drawn

00:02:05.120 --> 00:02:07.480
attention from the IETF, leading to

00:02:07.480 --> 00:02:10.200
some informational RFCs.

00:02:10.200 --> 00:02:12.870
And since then, three working groups have been

00:02:12.870 --> 00:02:15.000
established to work on solutions.

00:02:15.000 --> 00:02:18.280
And as a result, we have seen three standardized

00:02:18.280 --> 00:02:20.620
DNS over encryption protocols.

00:02:20.620 --> 00:02:23.200
And of course, there are still more protocols and

00:02:23.200 --> 00:02:25.360
tests coming to solve the problem, but

00:02:25.360 --> 00:02:30.440
we do not discuss them today.

00:02:30.440 --> 00:02:33.380
In this study, we focus on two standardized and

00:02:33.380 --> 00:02:36.080
extensively supported protocols, DNS over

00:02:36.080 --> 00:02:42.080
TLS, or DOT, and DNS over HTTPS, or DOE.

00:02:42.080 --> 00:02:45.240
The idea of DOT is very straightforward.

00:02:45.240 --> 00:02:48.580
Before DNS queries, I negotiate a TLS session

00:02:48.580 --> 00:02:52.000
with my resolver and use it to encrypt wire-format

00:02:52.000 --> 00:02:54.160
DNS packets.

00:02:54.160 --> 00:02:57.860
DOT runs over a dedicated port 853, and to use it,

00:02:57.860 --> 00:03:00.920
some client software needs to be updated,

00:03:00.920 --> 00:03:03.960
like the stub resolver of my operating system.

00:03:03.960 --> 00:03:08.120
DOE, on the other hand, embeds DNS packets into

00:03:08.120 --> 00:03:09.840
HTTPS messages.

00:03:09.840 --> 00:03:13.560
It shares port 443, and is especially convenient

00:03:13.560 --> 00:03:18.000
for user-space applications, such as web browsers.

00:03:18.000 --> 00:03:22.020
And currently, both protocols work between stub

00:03:22.020 --> 00:03:24.400
and recursive resolvers.

00:03:24.400 --> 00:03:27.520
And here are two examples on how to use these

00:03:27.520 --> 00:03:28.640
protocols.

00:03:28.640 --> 00:03:32.360
DOT queries can be issued with tools like KDig,

00:03:32.360 --> 00:03:35.440
which is the stub resolver of NotDNS.

00:03:35.440 --> 00:03:39.190
DOE queries can be issued, for example, from a

00:03:39.190 --> 00:03:42.760
browser, using a URI template like this.

00:03:42.760 --> 00:03:46.200
The query names or DNS packets can be embedded

00:03:46.200 --> 00:03:49.000
into the URL or HTTP message body.

00:03:49.000 --> 00:03:52.970
Actually, the standard DOE uses wire-format DNS

00:03:52.970 --> 00:03:55.900
packets in the HTTP message body.

00:03:55.900 --> 00:03:58.780
The format displayed here is the JSON format

00:03:58.780 --> 00:04:01.760
adopted by some public resolvers, and I use

00:04:01.760 --> 00:04:06.400
it here because it's readable.

00:04:06.400 --> 00:04:09.100
The history of DNS over encryption protocols is

00:04:09.100 --> 00:04:11.960
not long, but they have been rapidly developing

00:04:11.960 --> 00:04:13.440
recently.

00:04:13.440 --> 00:04:16.710
From the industry, several large public DNS resolvers,

00:04:16.710 --> 00:04:19.040
DNS software, operating systems,

00:04:19.040 --> 00:04:24.640
and web browsers have implemented DOT or DOE.

00:04:24.640 --> 00:04:27.760
And some more recent updates that will further

00:04:27.760 --> 00:04:28.920
push them forward.

00:04:28.920 --> 00:04:31.130
Web browsers and operating systems have been

00:04:31.130 --> 00:04:33.400
rolling out DNS over encryption, and these

00:04:33.400 --> 00:04:36.860
are just some examples from large vendors.

00:04:36.860 --> 00:04:40.840
This year, Firefox has even enabled DOE by

00:04:40.840 --> 00:04:44.840
default for users in the United States.

00:04:44.840 --> 00:04:47.350
So after the efforts from the community and the

00:04:47.350 --> 00:04:49.800
industry, we aim to understand the current

00:04:49.800 --> 00:04:53.670
DNS over encryption ecosystem from Internet users'

00:04:53.670 --> 00:04:54.960
perspective.

00:04:54.960 --> 00:04:57.320
We seek answers to these questions.

00:04:57.320 --> 00:05:00.370
How many DNS over encryption servers are there in

00:05:00.370 --> 00:05:03.600
the wild, and how are they currently operated?

00:05:03.600 --> 00:05:06.410
How are the performances of DNS over encryption

00:05:06.410 --> 00:05:09.280
services, and are there any issues preventing

00:05:09.280 --> 00:05:11.960
global users from accessing them?

00:05:11.960 --> 00:05:16.180
And what does the real-world usage of the

00:05:16.180 --> 00:05:18.720
protocols look like?

00:05:18.720 --> 00:05:22.980
So first up, how many servers are offering DNS

00:05:22.980 --> 00:05:25.760
over encryption services?

00:05:25.760 --> 00:05:29.040
Discovering open DOT servers is simple.

00:05:29.040 --> 00:05:32.770
It runs over a dedicated port, so an Internet-wide

00:05:32.770 --> 00:05:34.440
scan will suffice.

00:05:34.440 --> 00:05:37.220
DOE servers, however, are different.

00:05:37.220 --> 00:05:41.220
They use URI templates and a shared port 443, so

00:05:41.220 --> 00:05:44.520
we cannot simply use port scans to discover

00:05:44.520 --> 00:05:45.520
them.

00:05:45.520 --> 00:05:48.820
But the RFC documents and large providers have

00:05:48.820 --> 00:05:51.600
used some common URI templates, such

00:05:51.600 --> 00:05:56.830
as /dns-query, which inspires us to look for them

00:05:56.830 --> 00:06:00.280
in large-scale URL datasets.

00:06:00.280 --> 00:06:03.270
And in more detail, to find open DOT resolvers,

00:06:03.270 --> 00:06:06.120
we first launch Internet-wide scans of port

00:06:06.120 --> 00:06:09.080
853 using ZMAP.

00:06:09.080 --> 00:06:12.200
For hosts with this port open, we send them DOT

00:06:12.200 --> 00:06:14.920
queries using the GET DNS API, and only

00:06:14.920 --> 00:06:18.440
those correctly answering our queries are counted

00:06:18.440 --> 00:06:19.880
as DOT resolvers.

00:06:19.880 --> 00:06:22.660
And finally, we fetch and verify their

00:06:22.660 --> 00:06:26.640
certificate chains on port 853 with OpenSSL.

00:06:26.640 --> 00:06:31.340
And in this study, we only consider resolvers in

00:06:31.340 --> 00:06:34.160
the IPv4 address space.

00:06:34.160 --> 00:06:37.820
So during February and May 2019, we repeated our

00:06:37.820 --> 00:06:41.280
scan every 10 days and found around 2000

00:06:41.280 --> 00:06:43.460
DOT resolver addresses.

00:06:43.460 --> 00:06:45.680
We further identified them by the subject of

00:06:45.680 --> 00:06:47.940
their certificates, and found several big

00:06:47.940 --> 00:06:51.760
players actually dominate in the count of servers.

00:06:51.760 --> 00:06:55.040
For example, clean browsing DNS alone accounts

00:06:55.040 --> 00:06:58.440
for over 1000 resolvers in almost each of

00:06:58.440 --> 00:07:01.480
our scan.

00:07:01.480 --> 00:07:04.140
And here are some more recent updates.

00:07:04.140 --> 00:07:07.500
In our latest scan on July 1st 2020, we find that

00:07:07.500 --> 00:07:09.760
there has been a significant increase

00:07:09.760 --> 00:07:12.680
in the number of open DOT resolvers.

00:07:12.680 --> 00:07:16.550
Compared to a year ago, which is July 1st 2019,

00:07:16.550 --> 00:07:18.680
the number of open DOT resolvers has

00:07:18.680 --> 00:07:23.760
risen to over 7.8 thousand, almost quadrupled.

00:07:23.760 --> 00:07:26.040
And our results also show that there have been

00:07:26.040 --> 00:07:28.100
more providers establishing their DOT

00:07:28.100 --> 00:07:30.060
resolvers.

00:07:30.060 --> 00:07:32.470
And meanwhile, from their certificates, we spot

00:07:32.470 --> 00:07:34.440
several big providers, which maintain

00:07:34.440 --> 00:07:35.440
many of them.

00:07:35.440 --> 00:07:37.990
And this time, Cloudflare tops the list with

00:07:37.990 --> 00:07:41.240
nearly 2000 resolver addresses, followed by

00:07:41.240 --> 00:07:44.270
Fortinet Firewall devices, clean browsing, and

00:07:44.270 --> 00:07:45.400
NextDNS.io.

00:07:45.400 --> 00:07:53.240
DNS over TLS uses certificates for authentication.

00:07:53.240 --> 00:07:56.290
The DOT usage profile suggests that under strict

00:07:56.290 --> 00:07:58.800
privacy, DOT clients should validate

00:07:58.800 --> 00:08:01.720
the full path of resolver certificates, so we

00:08:01.720 --> 00:08:04.240
check all DOT resolvers in our list with

00:08:04.240 --> 00:08:06.220
OpenSSL.

00:08:06.220 --> 00:08:09.530
During our regular scans from February to July

00:08:09.530 --> 00:08:13.160
2019, we find that around 25% of all

00:08:13.160 --> 00:08:16.830
DOT providers have at least one resolver which

00:08:16.830 --> 00:08:20.120
use invalid certificates on port 853.

00:08:20.120 --> 00:08:23.410
A year later, we find that invalid certificates

00:08:23.410 --> 00:08:25.320
still poses as a problem.

00:08:25.320 --> 00:08:28.220
In our latest scan this July, the ratio of open

00:08:28.220 --> 00:08:30.880
DOT resolvers with invalid certificates

00:08:30.880 --> 00:08:36.530
rises to 28%, but they belong to a smaller

00:08:36.530 --> 00:08:39.940
portion of DOT providers.

00:08:39.940 --> 00:08:42.390
We take a look into the error codes that OpenSSL

00:08:42.390 --> 00:08:44.980
shows, and find that the invalid certificates

00:08:44.980 --> 00:08:47.540
belong to three categories.

00:08:47.540 --> 00:08:50.650
Around 70% are self-signed certificates, and most

00:08:50.650 --> 00:08:52.860
of them are installed on firewalls and

00:08:52.860 --> 00:08:55.660
TLS inspection devices.

00:08:55.660 --> 00:08:59.370
Under 15% of the invalid certificates are expired,

00:08:59.370 --> 00:09:01.460
and one third of them have expired

00:09:01.460 --> 00:09:04.600
before 2020, that is, more than half a year,

00:09:04.600 --> 00:09:07.620
which could have already been out of maintenance.

00:09:07.620 --> 00:09:10.560
The rest has problems in their certificate chains

00:09:10.560 --> 00:09:12.960
which cannot be correctly validated.

00:09:12.960 --> 00:09:15.270
Because the authentication of DOT relies on the

00:09:15.270 --> 00:09:17.640
certificates, we suggest that the providers

00:09:17.640 --> 00:09:23.740
keep their servers under regular maintenance.

00:09:23.740 --> 00:09:27.260
To discover OpenDNS over HTTPS resolvers, we

00:09:27.260 --> 00:09:30.020
search for the common URI templates in

00:09:30.020 --> 00:09:33.040
a large-scale URL dataset provided by our

00:09:33.040 --> 00:09:34.840
industrial partner.

00:09:34.840 --> 00:09:37.710
The dataset consists of URLs collected from their

00:09:37.710 --> 00:09:40.500
web crawlers, sandboxes, and some external

00:09:40.500 --> 00:09:42.080
data feeds.

00:09:42.080 --> 00:09:44.890
We find that the number of DOT resolvers is

00:09:44.890 --> 00:09:47.180
modest compared to that of DOT.

00:09:47.180 --> 00:09:51.780
In May 2019, only 17 DOT providers are discovered

00:09:51.780 --> 00:09:53.060
by our method.

00:09:53.060 --> 00:09:55.470
And most of them have already been included in

00:09:55.470 --> 00:09:57.860
previous lists like this one, maintained

00:09:57.860 --> 00:10:03.260
by the Curl project, and we also find two resolvers

00:10:03.260 --> 00:10:05.340
beyond the list.

00:10:05.340 --> 00:10:08.540
And more recently, in this July, the number of

00:10:08.540 --> 00:10:10.820
OpenDNS resolvers also rises.

00:10:10.820 --> 00:10:15.170
We discover over 50 valid URIs which are operated

00:10:15.170 --> 00:10:17.000
by 37 providers.

00:10:17.000 --> 00:10:20.100
And our list also contains several resolvers out

00:10:20.100 --> 00:10:23.140
of no lists, and here we give some examples.

00:10:23.140 --> 00:10:25.470
And in particular, we find that the lists also

00:10:25.470 --> 00:10:27.900
include some resolvers which are established

00:10:27.900 --> 00:10:33.180
by large ISPs.

00:10:33.180 --> 00:10:34.540
Our second question.

00:10:34.540 --> 00:10:37.780
We know that clear-text DNS are manipulated under

00:10:37.780 --> 00:10:39.220
various policies.

00:10:39.220 --> 00:10:42.330
So are DNS over encryption services reachable by

00:10:42.330 --> 00:10:43.580
global clients?

00:10:43.580 --> 00:10:48.640
And are there any issues preventing their access?

00:10:48.640 --> 00:10:51.920
We use SOCKS5 proxy network platforms that allow

00:10:51.920 --> 00:10:54.860
large-scale client-side measurements.

00:10:54.860 --> 00:10:58.040
To explain, clear-text and encrypted DNS queries

00:10:58.040 --> 00:11:00.520
are issued by our measurement client, passing

00:11:00.520 --> 00:11:04.100
a superproxy, forwarded to global exit nodes, and

00:11:04.100 --> 00:11:07.080
eventually reach the target resolvers.

00:11:07.080 --> 00:11:09.500
By checking its response at the measurement

00:11:09.500 --> 00:11:12.060
client, we can tell whether a DNS resolution

00:11:12.060 --> 00:11:16.940
from the exit node is successful.

00:11:16.940 --> 00:11:20.190
To perform the tests, we use two proxy networks,

00:11:20.190 --> 00:11:23.200
one global, which is ProxyRack, and one in

00:11:23.200 --> 00:11:26.360
China only, to see the behaviors of a typical

00:11:26.360 --> 00:11:27.940
censored network.

00:11:27.940 --> 00:11:32.120
In total, we collect 29,000 global vantage points

00:11:32.120 --> 00:11:36.020
from 166 countries and 85,000 Chinese

00:11:36.020 --> 00:11:39.440
vantage points.

00:11:39.440 --> 00:11:43.310
And for each exit node, we first issue clear-text

00:11:43.310 --> 00:11:47.220
DNS, DOT, and DOE queries of our control domain

00:11:47.220 --> 00:11:51.100
to three popular DNS services, Cloudflare, Google,

00:11:51.100 --> 00:11:53.660
and QWAP9, to see whether they are

00:11:53.660 --> 00:11:55.400
successful.

00:11:55.400 --> 00:11:58.640
From the nodes which fail the queries, we fetch

00:11:58.640 --> 00:12:01.940
the TLS certificates, probe common ports,

00:12:01.940 --> 00:12:04.900
and fetch webpages on the resolver addresses to

00:12:04.900 --> 00:12:07.260
check whether the failed nodes are actually

00:12:07.260 --> 00:12:12.180
connecting to the real services.

00:12:12.180 --> 00:12:14.820
And here are our test results obtained in 2019.

00:12:14.820 --> 00:12:17.550
Globally, we find that the failure rate of DNS

00:12:17.550 --> 00:12:19.780
over encryption is lower than that of

00:12:19.780 --> 00:12:21.620
clear-text DNS.

00:12:21.620 --> 00:12:24.550
We suppose it is because interception policies

00:12:24.550 --> 00:12:27.540
are currently not considering port 853 or

00:12:27.540 --> 00:12:28.540
443.

00:12:28.540 --> 00:12:32.060
And as a result, clients may switch to DOT or DOE

00:12:32.060 --> 00:12:35.460
when their traditional DNS has problems.

00:12:35.460 --> 00:12:38.670
However, global clients see more query failures

00:12:38.670 --> 00:12:41.540
when using Cloudflare DOT, and we find that

00:12:41.540 --> 00:12:45.660
the address quad1 can be hijacked in these

00:12:45.660 --> 00:12:50.820
networks, which actually has been an old problem.

00:12:50.820 --> 00:12:52.860
And here are some examples.

00:12:52.860 --> 00:12:56.010
These ports are not open on the Cloudflare quad1

00:12:56.010 --> 00:12:58.480
address, but from the failed clients

00:12:58.480 --> 00:13:02.080
when we probed these ports on quad1, they are

00:13:02.080 --> 00:13:03.180
found open.

00:13:03.180 --> 00:13:06.100
So these clients are not able to use Cloudflare

00:13:06.100 --> 00:13:08.840
DOT because this address is already taken

00:13:08.840 --> 00:13:14.620
by something else, like network devices.

00:13:14.620 --> 00:13:17.720
And back to the results, we also notice a high

00:13:17.720 --> 00:13:20.020
failure rate for quad9 DOE.

00:13:20.020 --> 00:13:23.750
We find that quad9 forwards DOE queries to itself

00:13:23.750 --> 00:13:26.620
on port 53 and sets a small timeout

00:13:26.620 --> 00:13:29.500
for this, which causes unnecessary server

00:13:29.500 --> 00:13:30.380
failures.

00:13:30.380 --> 00:13:32.800
We have reported this issue and they are

00:13:32.800 --> 00:13:35.100
considering losing the timeout.

00:13:35.100 --> 00:13:38.300
Another finding is that nearly all clients in

00:13:38.300 --> 00:13:40.540
China fail to use Google DOE.

00:13:40.540 --> 00:13:43.940
And yes, it's because of censorship.

00:13:43.940 --> 00:13:47.000
At the time of experiment, Google DOE was not

00:13:47.000 --> 00:13:49.420
running on its Anycast address.

00:13:49.420 --> 00:13:52.570
But since August 2019, Google DOE has migrated to

00:13:52.570 --> 00:13:54.860
Anycast, and hopefully this issue should

00:13:54.860 --> 00:13:58.180
be resolved.

00:13:58.180 --> 00:14:00.840
Our next question, encryption can bring some

00:14:00.840 --> 00:14:02.500
performance downgrade.

00:14:02.500 --> 00:14:06.900
So is the query latency tolerable for DNS over

00:14:06.900 --> 00:14:09.420
encryption services?

00:14:09.420 --> 00:14:12.850
We aim to measure the relative query time of

00:14:12.850 --> 00:14:16.140
clear text DNS and DNS over encryption.

00:14:16.140 --> 00:14:19.280
And more importantly, we measure their query time

00:14:19.280 --> 00:14:21.860
when connection is reused, as required

00:14:21.860 --> 00:14:23.900
by their standards.

00:14:23.900 --> 00:14:26.950
Connection reuse is also supported as the default

00:14:26.950 --> 00:14:29.060
option of many stub and recursive

00:14:29.060 --> 00:14:30.060
resolvers.

00:14:30.060 --> 00:14:34.500
And again, we use ProxyRack to recruit 8000

00:14:34.500 --> 00:14:37.100
global clients for the test.

00:14:37.100 --> 00:14:40.230
On each client, we issue clear text DNS, DOT and

00:14:40.230 --> 00:14:42.980
DOE queries to the popular resolvers and

00:14:42.980 --> 00:14:46.540
compare their differences in query latency.

00:14:46.540 --> 00:14:49.220
Because we focus on connection reuse, we only

00:14:49.220 --> 00:14:51.860
record their DNS transaction time, which is

00:14:51.860 --> 00:14:55.700
after the connection setup.

00:14:55.700 --> 00:14:59.150
Our results here show that when connection is reused,

00:14:59.150 --> 00:15:01.100
the extra query latency of DNS

00:15:01.100 --> 00:15:04.020
over encryption is tolerable.

00:15:04.020 --> 00:15:06.400
Take the Cloudflare resolver as an example.

00:15:06.400 --> 00:15:09.180
When using its DNS over encryption services, our

00:15:09.180 --> 00:15:11.380
global vantage points see extra query

00:15:11.380 --> 00:15:14.860
latency on the order of several milliseconds

00:15:14.860 --> 00:15:17.780
compared to using its clear text DNS.

00:15:17.780 --> 00:15:20.350
And of course, we also see that for individual

00:15:20.350 --> 00:15:22.980
clients or vantages in different countries,

00:15:22.980 --> 00:15:28.430
their performances can fluctuate, but on average,

00:15:28.430 --> 00:15:31.180
the overhead is modest.

00:15:31.180 --> 00:15:34.210
And finally, after all these efforts, how are the

00:15:34.210 --> 00:15:36.340
DNS over encryption protocols now

00:15:36.340 --> 00:15:37.580
used?

00:15:37.580 --> 00:15:41.620
And what does their traffic scale look like?

00:15:41.620 --> 00:15:44.540
We tried to answer this question from passive

00:15:44.540 --> 00:15:45.980
traffic datasets.

00:15:45.980 --> 00:15:49.290
Observing DOT traffic is easy because it uses a

00:15:49.290 --> 00:15:50.700
dedicated port.

00:15:50.700 --> 00:15:54.310
We can find port 853 traffic to DOT resolver

00:15:54.310 --> 00:15:57.300
addresses from ISP NetFlow datasets.

00:15:57.300 --> 00:16:00.060
For DOE, it is again different.

00:16:00.060 --> 00:16:03.730
But recall that DOE resolvers use URI templates,

00:16:03.730 --> 00:16:06.620
often with a resolver domain name in it, like

00:16:06.620 --> 00:16:10.820
dns.google or cloudflaredns.com.

00:16:10.820 --> 00:16:13.940
And these domain names need to be resolved before

00:16:13.940 --> 00:16:16.220
using DOE, and that inspires us to

00:16:16.220 --> 00:16:20.580
observe the query volume of these domain names in

00:16:20.580 --> 00:16:24.920
passive DNS datasets to reflect their usage.

00:16:24.920 --> 00:16:28.870
To begin with, we acquire 18-month sampled NetFlow

00:16:28.870 --> 00:16:31.300
datasets from a large Chinese ISP,

00:16:31.300 --> 00:16:34.380
which is locked by its backbone routers.

00:16:34.380 --> 00:16:38.350
If a TCP flow is sent over port 853 to a DOT

00:16:38.350 --> 00:16:42.620
resolver address, we record it as DOT traffic.

00:16:42.620 --> 00:16:45.400
We find that the traffic scale of DOT is small

00:16:45.400 --> 00:16:49.260
before 2019, around 2-3 orders of magnitude

00:16:49.260 --> 00:16:53.200
less than traditional DNS over port 53.

00:16:53.200 --> 00:16:56.420
That being said, we also notice a growth of DOT

00:16:56.420 --> 00:16:58.420
traffic over the months.

00:16:58.420 --> 00:17:02.750
In compliance of this ISP, traffic to cloudflare.rises

00:17:02.750 --> 00:17:08.980
by over 50% from July 2018 to December 2018.

00:17:08.980 --> 00:17:12.210
If we zoom into the client subnets of DOT traffic,

00:17:12.210 --> 00:17:14.540
we find some giant netblocks that

00:17:14.540 --> 00:17:17.620
account for more than half of the traffic.

00:17:17.620 --> 00:17:20.970
We suppose that they could be associated with

00:17:20.970 --> 00:17:22.600
proxy services or not.

00:17:22.600 --> 00:17:26.160
But on the other hand, in the beginning of 2019,

00:17:26.160 --> 00:17:28.300
we also find a lot of temporary DOT

00:17:28.300 --> 00:17:33.930
users, which were only active for less than one

00:17:33.930 --> 00:17:34.980
week.

00:17:34.980 --> 00:17:38.010
For DOE, we inspect large passive DNS datasets

00:17:38.010 --> 00:17:40.820
for the query volume of the resolver domain

00:17:40.820 --> 00:17:41.820
names.

00:17:41.820 --> 00:17:44.790
Not surprisingly, DOE queries mostly flow to

00:17:44.790 --> 00:17:47.540
large providers and can rise due to events

00:17:47.540 --> 00:17:50.620
like experiments from the industry.

00:17:50.620 --> 00:17:53.510
And also, until very recently, there has been a

00:17:53.510 --> 00:17:55.860
growing trend on their query volume, which

00:17:55.860 --> 00:17:59.100
suggests growing usage.

00:17:59.100 --> 00:18:02.300
Actually, public DNS service providers have a

00:18:02.300 --> 00:18:05.380
better angle to look into DNS over encryption

00:18:05.380 --> 00:18:06.460
traffic.

00:18:06.460 --> 00:18:09.110
And from their data, we see a more promising

00:18:09.110 --> 00:18:10.340
growth of usage.

00:18:10.340 --> 00:18:14.500
For example, cloudflare reported in 2019 that up

00:18:14.500 --> 00:18:17.580
to 8% of its queries have been encrypted.

00:18:17.580 --> 00:18:22.450
And qihu360 reports that its DOE service has

00:18:22.450 --> 00:18:26.980
gained over 1 million active users so far.

00:18:26.980 --> 00:18:29.460
And some takeaways and recommendation.

00:18:29.460 --> 00:18:32.110
For protocol designers, we think one of the

00:18:32.110 --> 00:18:34.740
reasons that DOT and DOE got strong support

00:18:34.740 --> 00:18:37.610
is that they are built on well-developed

00:18:37.610 --> 00:18:38.680
protocols.

00:18:38.680 --> 00:18:41.450
For service providers, we recommend they correct

00:18:41.450 --> 00:18:44.180
misconfigurations and keep their servers under

00:18:44.180 --> 00:18:46.260
regular maintenance.

00:18:46.260 --> 00:18:48.800
For internet users, we believe education is

00:18:48.800 --> 00:18:51.260
necessary to let them know the benefits of

00:18:51.260 --> 00:18:53.380
DNS over encryption.

00:18:53.380 --> 00:18:57.640
We also publish our scanning results and source

00:18:57.640 --> 00:19:01.720
code on our project website for public use.

00:19:01.720 --> 00:19:03.890
And finally, a quick summary on our key

00:19:03.890 --> 00:19:04.940
observations.

00:19:04.940 --> 00:19:08.120
First, we discovered thousands of active DNS over

00:19:08.120 --> 00:19:10.640
encryption resolvers in the wild, and

00:19:10.640 --> 00:19:13.910
a lot of small providers which are less known to

00:19:13.910 --> 00:19:14.780
public.

00:19:14.780 --> 00:19:17.860
But their implementations are not always secure.

00:19:17.860 --> 00:19:22.040
A quarter of them use invalid TLS certificates.

00:19:22.040 --> 00:19:25.050
For global clients, DNS over encryption services

00:19:25.050 --> 00:19:27.860
are less interrupted by empath policies, and

00:19:27.860 --> 00:19:30.790
their performance is tolerable with reused

00:19:30.790 --> 00:19:31.940
connections.

00:19:31.940 --> 00:19:35.340
And finally, from real-world traffic, we find the

00:19:35.340 --> 00:19:37.860
usage of DNS over encryption is still

00:19:37.860 --> 00:19:42.890
less than traditional DNS, but there has been a

00:19:42.890 --> 00:19:44.820
growing trend.

00:19:44.820 --> 00:19:46.580
So that wraps up my talk today.

00:19:46.580 --> 00:19:48.640
Thank you for your time, and I'm happy to take

00:19:48.640 --> 00:19:49.380
questions.

