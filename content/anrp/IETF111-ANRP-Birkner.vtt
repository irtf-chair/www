WEBVTT

00:00:00.001 --> 00:00:05.200
Hi everyone, my name is RÃ¼diger Birkner and

00:00:05.200 --> 00:00:08.320
today I'm going to talk about Config2Spec,

00:00:08.320 --> 00:00:12.020
a tool to facilitate intent-based networking or

00:00:12.020 --> 00:00:15.200
at least a tool to take some steps towards

00:00:15.200 --> 00:00:16.280
it.

00:00:16.280 --> 00:00:20.060
For quite some years, intent-based networking or

00:00:20.060 --> 00:00:23.080
short IBN has been on everyone's mind.

00:00:23.080 --> 00:00:24.920
And the idea of it sounds great.

00:00:24.920 --> 00:00:27.620
You specify your intent and the network just

00:00:27.620 --> 00:00:29.180
behaves accordingly.

00:00:29.180 --> 00:00:31.740
No more cumbersome configurations.

00:00:31.740 --> 00:00:34.320
You need intent and you're done.

00:00:34.320 --> 00:00:36.920
Unfortunately, we're not there yet.

00:00:36.920 --> 00:00:39.920
Actually there's still quite some ground to be

00:00:39.920 --> 00:00:42.480
covered, but at least there's progress.

00:00:42.480 --> 00:00:46.520
All major vendors have somewhat intent-based

00:00:46.520 --> 00:00:49.680
networking product or solution.

00:00:49.680 --> 00:00:53.370
And also in academia, a lot of work has gone into

00:00:53.370 --> 00:00:53.900
it.

00:00:53.900 --> 00:00:56.810
For example, there are network configuration

00:00:56.810 --> 00:00:59.420
synthesis tools that allow operators to

00:00:59.420 --> 00:01:00.320
automatically

00:01:00.320 --> 00:01:04.300
produce network configurations according to their

00:01:04.300 --> 00:01:05.160
intent.

00:01:05.160 --> 00:01:07.770
And there are many configuration validation and

00:01:07.770 --> 00:01:09.900
verification tools that allow to check

00:01:09.900 --> 00:01:13.550
whether your configuration satisfies your intent

00:01:13.550 --> 00:01:14.320
or not.

00:01:14.320 --> 00:01:17.200
Some of these tools made it even and are

00:01:17.200 --> 00:01:19.700
commercially available now.

00:01:19.700 --> 00:01:22.520
So imagine you have just heard about these tools

00:01:22.520 --> 00:01:25.200
and you want to try them out for yourselves.

00:01:25.200 --> 00:01:27.250
For example, you're about to deploy some

00:01:27.250 --> 00:01:29.670
configuration change and you want to make sure

00:01:29.670 --> 00:01:30.380
that the

00:01:30.380 --> 00:01:33.590
change really only does what you intended to do

00:01:33.590 --> 00:01:35.760
and doesn't break anything.

00:01:35.760 --> 00:01:38.100
So you start looking around and you find that

00:01:38.100 --> 00:01:41.000
today several network validation and verification

00:01:41.000 --> 00:01:42.880
tools are available.

00:01:42.880 --> 00:01:46.310
You check them out and you realize that they more

00:01:46.310 --> 00:01:49.060
or less all follow the same recipe.

00:01:49.060 --> 00:01:51.640
First of all, you get the config, you apply your

00:01:51.640 --> 00:01:53.920
changes and you provide it to the tool.

00:01:53.920 --> 00:01:57.240
Second, you need to specify your intent.

00:01:57.240 --> 00:02:00.520
Third, you need to run the tool, you wait for the

00:02:00.520 --> 00:02:01.360
results.

00:02:01.360 --> 00:02:03.700
And finally, you check the results and maybe you

00:02:03.700 --> 00:02:06.100
need to adapt something in your configurations

00:02:06.100 --> 00:02:07.760
or you're good to go.

00:02:07.760 --> 00:02:11.120
So it's quite a straightforward process, no?

00:02:11.120 --> 00:02:14.400
But hold on, most of these steps are clear.

00:02:14.400 --> 00:02:18.440
Get the configurations, run the tool, act upon it.

00:02:18.440 --> 00:02:20.300
But what is actually this intent?

00:02:20.300 --> 00:02:23.840
What is a specification?

00:02:23.840 --> 00:02:25.960
Let's look at that a bit closer.

00:02:25.960 --> 00:02:29.860
So in general, a specification simply describes

00:02:29.860 --> 00:02:32.060
the behavior of a system.

00:02:32.060 --> 00:02:35.660
So as the name says, it specifies how the system

00:02:35.660 --> 00:02:37.040
should behave.

00:02:37.040 --> 00:02:40.310
Hence in our case, in a network, a specification

00:02:40.310 --> 00:02:43.560
simply consists of all the policies that should

00:02:43.560 --> 00:02:45.840
hold in your network.

00:02:45.840 --> 00:02:48.330
So in this project, we consider policies from a

00:02:48.330 --> 00:02:51.520
policy language and we support four predicates,

00:02:51.520 --> 00:02:55.220
reachability, isolation, waypointing and load

00:02:55.220 --> 00:02:56.320
balancing.

00:02:56.320 --> 00:02:59.400
These are the most common policies in the network

00:02:59.400 --> 00:03:02.360
validation and verification literature.

00:03:02.360 --> 00:03:06.440
So for example, our specification could consist

00:03:06.440 --> 00:03:10.500
of the following policies for the given network.

00:03:10.500 --> 00:03:13.220
But what does it actually mean these policies

00:03:13.220 --> 00:03:14.220
should hold?

00:03:14.220 --> 00:03:16.680
The network can be in different states, routers

00:03:16.680 --> 00:03:19.040
and links can fail and the network's behavior

00:03:19.040 --> 00:03:21.080
will change.

00:03:21.080 --> 00:03:24.450
For sure, the policies will all hold when all the

00:03:24.450 --> 00:03:25.680
links are up.

00:03:25.680 --> 00:03:29.120
But what if router R1 or some link fails?

00:03:29.120 --> 00:03:30.760
Or what if all the link fails?

00:03:30.760 --> 00:03:33.320
Do the policies still have to hold?

00:03:33.320 --> 00:03:36.560
So clearly just having a set of policies is not

00:03:36.560 --> 00:03:37.520
enough.

00:03:37.520 --> 00:03:40.460
We also need a context, a context under which

00:03:40.460 --> 00:03:42.600
these policies have to hold.

00:03:42.600 --> 00:03:44.870
So we can just extend our definition of the

00:03:44.870 --> 00:03:47.360
specification by not only requiring the set

00:03:47.360 --> 00:03:51.080
of policies, but also by requiring that the set

00:03:51.080 --> 00:03:54.080
of policies have to hold under a given

00:03:54.080 --> 00:03:55.960
failure model.

00:03:55.960 --> 00:03:58.670
Now this failure model provides the missing

00:03:58.670 --> 00:03:59.440
context.

00:03:59.440 --> 00:04:02.080
An operator can specify all the concrete

00:04:02.080 --> 00:04:03.340
environments.

00:04:03.340 --> 00:04:05.930
So all the states of the network for which the

00:04:05.930 --> 00:04:07.460
policies should hold.

00:04:07.460 --> 00:04:09.990
So one concrete environment is basically one

00:04:09.990 --> 00:04:12.520
state of the network where simply every link

00:04:12.520 --> 00:04:16.800
is assigned to be either up or down.

00:04:16.800 --> 00:04:19.360
For example, the operator could specify the

00:04:19.360 --> 00:04:21.960
following five environments and in a realistic

00:04:21.960 --> 00:04:25.010
setting with a larger topology, specifying

00:04:25.010 --> 00:04:28.160
manually all these concrete environments is

00:04:28.160 --> 00:04:31.920
cumbersome and also not desired.

00:04:31.920 --> 00:04:35.040
So therefore you can actually capture such a

00:04:35.040 --> 00:04:37.800
failure model in two parts, with a symbolic

00:04:37.800 --> 00:04:40.920
environment and the failure bound.

00:04:40.920 --> 00:04:43.690
The symbolic environment is basically the network

00:04:43.690 --> 00:04:45.960
topology in which every link is assigned

00:04:45.960 --> 00:04:50.000
one of three states, up, down or symbolic.

00:04:50.000 --> 00:04:54.240
And symbolic simply means that the link can be

00:04:54.240 --> 00:04:56.200
either up or down.

00:04:56.200 --> 00:04:58.390
And the second part of failure bound simply

00:04:58.390 --> 00:05:00.520
provides a bound on the maximum number of

00:05:00.520 --> 00:05:04.390
links that can or are expected to be down at the

00:05:04.390 --> 00:05:05.580
same time.

00:05:05.580 --> 00:05:08.830
So together the set of policies and the failure

00:05:08.830 --> 00:05:12.020
model make up the network specification.

00:05:12.020 --> 00:05:14.280
And this definition of the specification is

00:05:14.280 --> 00:05:16.440
actually widely used in today's network

00:05:16.440 --> 00:05:17.100
verification

00:05:17.100 --> 00:05:19.500
literature.

00:05:19.500 --> 00:05:21.340
So now that we know what the network

00:05:21.340 --> 00:05:23.910
specification is, we can come back to the recipe

00:05:23.910 --> 00:05:24.140
and we

00:05:24.140 --> 00:05:27.840
should be all set to use the network validator to

00:05:27.840 --> 00:05:30.700
check our configuration change.

00:05:30.700 --> 00:05:33.820
Unfortunately, this is not the case.

00:05:33.820 --> 00:05:36.400
While the definition of a specification is

00:05:36.400 --> 00:05:39.420
actually quite simple, writing down a complete

00:05:39.420 --> 00:05:43.220
specification is actually extremely difficult.

00:05:43.220 --> 00:05:46.070
And this is not just in networking the case, but

00:05:46.070 --> 00:05:48.660
in general, as this tweet of a well-known

00:05:48.660 --> 00:05:51.380
researcher shows.

00:05:51.380 --> 00:05:54.660
The need for specification often prevents people

00:05:54.660 --> 00:05:57.000
from using verification tools.

00:05:57.000 --> 00:06:01.070
This is also what a paper from HotNets 2019 by

00:06:01.070 --> 00:06:04.260
Ryan Beckett and Ratul Mahajan noted.

00:06:04.260 --> 00:06:07.590
So they basically said that outside of a handful

00:06:07.590 --> 00:06:10.860
of large cloud computing providers, the use

00:06:10.860 --> 00:06:14.060
of network verification tools is still sparse.

00:06:14.060 --> 00:06:17.010
And they even argued that the next frontier for

00:06:17.010 --> 00:06:19.580
network verification is to enable easy

00:06:19.580 --> 00:06:23.610
and effective use for the average network

00:06:23.610 --> 00:06:24.960
engineer.

00:06:24.960 --> 00:06:27.520
And actually, we also have our own anecdotal

00:06:27.520 --> 00:06:29.060
experience with that.

00:06:29.060 --> 00:06:31.210
A while ago, we were discussing with a network

00:06:31.210 --> 00:06:33.340
operator that mentioned to us that they were

00:06:33.340 --> 00:06:36.260
about to also try to deploy such a network

00:06:36.260 --> 00:06:38.060
verification tools.

00:06:38.060 --> 00:06:40.440
But in the end, the adoption of this tool fell

00:06:40.440 --> 00:06:42.620
through just because the tool required

00:06:42.620 --> 00:06:45.220
a specification.

00:06:45.220 --> 00:06:47.500
You might still wonder and ask yourself, is it

00:06:47.500 --> 00:06:49.380
really that hard to write down how you

00:06:49.380 --> 00:06:50.980
want your network to behave?

00:06:50.980 --> 00:06:54.380
Well, just take Internet2 as an example.

00:06:54.380 --> 00:06:57.340
As part of this project, we analyzed the publicly

00:06:57.340 --> 00:07:00.660
available configuration from 2015 and found

00:07:00.660 --> 00:07:04.700
that its specification is made up of almost 4,000

00:07:04.700 --> 00:07:06.300
policy predicates.

00:07:06.300 --> 00:07:10.580
Now imagine writing this specification by hand

00:07:10.580 --> 00:07:13.720
and doing this without mistake.

00:07:13.720 --> 00:07:16.520
Or if you are a network operator, would you know

00:07:16.520 --> 00:07:18.700
all the policies of your network?

00:07:18.700 --> 00:07:21.180
Or could you fully describe its behavior?

00:07:21.180 --> 00:07:24.450
I would really be curious to discuss this with

00:07:24.450 --> 00:07:26.740
you and hear what you have to say.

00:07:26.740 --> 00:07:29.980
But in any case, don't worry.

00:07:29.980 --> 00:07:32.830
This is exactly where Config2Spec enters the

00:07:32.830 --> 00:07:35.940
scenes and is here to assist network operators.

00:07:35.940 --> 00:07:39.000
So together with Dana from Technion, Martin and

00:07:39.000 --> 00:07:41.180
Laurent from ETH Zurich, we developed

00:07:41.180 --> 00:07:44.730
Config2Spec, a tool that automatically mines a

00:07:44.730 --> 00:07:46.700
network specification.

00:07:46.700 --> 00:07:50.390
So Config2Spec takes as input your network's

00:07:50.390 --> 00:07:53.620
configuration and the failure model.

00:07:53.620 --> 00:07:57.020
And it automatically finds your network

00:07:57.020 --> 00:08:00.910
specification, so all the policies that your

00:08:00.910 --> 00:08:02.740
network enforces.

00:08:02.740 --> 00:08:05.080
In the following, we will first consider two

00:08:05.080 --> 00:08:07.600
strong approaches that individually explore

00:08:07.600 --> 00:08:10.500
one dimension of the problem at a time.

00:08:10.500 --> 00:08:12.940
Then I show you how we combine these two

00:08:12.940 --> 00:08:16.420
approaches to leverage their individual strengths.

00:08:16.420 --> 00:08:18.940
And in the end, we'll talk about Config2Spec's

00:08:18.940 --> 00:08:19.860
performance.

00:08:19.860 --> 00:08:24.500
So how long it actually takes to compute such a

00:08:24.500 --> 00:08:26.540
specification.

00:08:26.540 --> 00:08:30.420
So let's get started with the straw man solutions.

00:08:30.420 --> 00:08:34.220
When you think back to the specification, you

00:08:34.220 --> 00:08:36.340
remember that we only want to have those

00:08:36.340 --> 00:08:39.680
policies from the space of all policies that hold

00:08:39.680 --> 00:08:42.260
for every single concrete environment

00:08:42.260 --> 00:08:44.140
in the failure model.

00:08:44.140 --> 00:08:46.940
So we kind of have two dimensions, or we have

00:08:46.940 --> 00:08:48.860
kind of two search spaces.

00:08:48.860 --> 00:08:51.400
One is the failure model, so all the concrete

00:08:51.400 --> 00:08:53.420
environments that it contains.

00:08:53.420 --> 00:08:56.820
And the other one are all the policies.

00:08:56.820 --> 00:09:00.020
So it's a space of all possible policy.

00:09:00.020 --> 00:09:02.900
Together in combination, this becomes untractable.

00:09:02.900 --> 00:09:07.420
However, we can look at the two in isolation.

00:09:07.420 --> 00:09:09.370
When we look at it from the perspective of the

00:09:09.370 --> 00:09:11.140
failure model, so when we look at all

00:09:11.140 --> 00:09:14.140
the concrete environments, we can make use of

00:09:14.140 --> 00:09:15.740
data plane analysis.

00:09:15.740 --> 00:09:18.540
And when we look at it from the perspective of

00:09:18.540 --> 00:09:21.180
the policies, we can make use of control

00:09:21.180 --> 00:09:23.060
plane verification.

00:09:23.060 --> 00:09:25.200
So what do I mean by that?

00:09:25.200 --> 00:09:28.820
Let's first look at data plane analysis.

00:09:28.820 --> 00:09:31.110
At the high level, we can break down the problem

00:09:31.110 --> 00:09:33.340
of finding the specification for a failure

00:09:33.340 --> 00:09:36.310
model and the configuration into finding the

00:09:36.310 --> 00:09:39.460
specification for each concrete environment

00:09:39.460 --> 00:09:41.700
within the failure model.

00:09:41.700 --> 00:09:45.420
And then we just combine the outputs.

00:09:45.420 --> 00:09:47.840
So we start with one concrete environment from

00:09:47.840 --> 00:09:49.620
the failure model, and together with

00:09:49.620 --> 00:09:53.510
the network configuration, we compute the forwarding

00:09:53.510 --> 00:09:56.060
state using data plane analysis.

00:09:56.060 --> 00:09:58.180
From the forwarding state, we can easily

00:09:58.180 --> 00:10:00.480
determine whether two nodes are reachable,

00:10:00.480 --> 00:10:01.220
isolated,

00:10:01.220 --> 00:10:03.220
and so on.

00:10:03.220 --> 00:10:05.970
So below here, I show you kind of an abstract

00:10:05.970 --> 00:10:07.580
illustration of this.

00:10:07.580 --> 00:10:11.860
The blue area represents the space of all

00:10:11.860 --> 00:10:14.300
possible policies.

00:10:14.300 --> 00:10:16.610
After running data plane analysis and finding all

00:10:16.610 --> 00:10:18.940
the policies for this one concrete environment,

00:10:18.940 --> 00:10:21.780
we can narrow it down, and we have kind of the

00:10:21.780 --> 00:10:24.300
set of policies that hold only for this

00:10:24.300 --> 00:10:26.180
one environment.

00:10:26.180 --> 00:10:29.740
So now we continue one environment after the

00:10:29.740 --> 00:10:30.540
other.

00:10:30.540 --> 00:10:32.680
And finally, at the end, we have the

00:10:32.680 --> 00:10:35.520
specification for each concrete environment in

00:10:35.520 --> 00:10:36.420
isolation.

00:10:36.420 --> 00:10:38.960
And since the specification of the full failure

00:10:38.960 --> 00:10:41.140
model is a set of policies that holds for

00:10:41.140 --> 00:10:44.750
all of them, we can simply take the intersection,

00:10:44.750 --> 00:10:48.540
and we will end up with the network specification.

00:10:48.540 --> 00:10:51.340
So as you can see, by intersecting one by one, we

00:10:51.340 --> 00:10:53.860
start with a very rough over-approximation

00:10:53.860 --> 00:10:57.460
of the specification and refine it step by step.

00:10:57.460 --> 00:11:01.320
And finally, we end up with the network

00:11:01.320 --> 00:11:03.320
specification.

00:11:03.320 --> 00:11:05.710
So when we now look at the problem from the

00:11:05.710 --> 00:11:08.500
perspective of the policies, and we use control

00:11:08.500 --> 00:11:12.450
plane verification, we have again the same

00:11:12.450 --> 00:11:13.700
situation.

00:11:13.700 --> 00:11:16.620
We have a large number of candidate policies.

00:11:16.620 --> 00:11:19.460
We have the failure model and the configuration.

00:11:19.460 --> 00:11:22.240
And with modern verification tools, we can easily

00:11:22.240 --> 00:11:24.100
check if a single policy holds for

00:11:24.100 --> 00:11:27.140
the entire failure model or not.

00:11:27.140 --> 00:11:30.030
So from that space of all policies, we can select

00:11:30.030 --> 00:11:32.380
one policy, feed it together with the

00:11:32.380 --> 00:11:34.850
config and the failure model to the verifier, and

00:11:34.850 --> 00:11:36.820
the verifier will tell us whether this

00:11:36.820 --> 00:11:41.340
one policy holds for the failure model or not.

00:11:41.340 --> 00:11:43.950
Now we can do this for every single possible

00:11:43.950 --> 00:11:47.060
policy separately, verifying them one by one,

00:11:47.060 --> 00:11:50.390
and ultimately obtain the full specification by

00:11:50.390 --> 00:11:52.320
taking the union of this.

00:11:52.320 --> 00:11:55.250
So here, we kind of under-approximate the

00:11:55.250 --> 00:11:58.300
specification and increase it step by step

00:11:58.300 --> 00:12:02.440
until we reach the full specification.

00:12:02.440 --> 00:12:05.700
So to quickly recap, both techniques have their

00:12:05.700 --> 00:12:06.860
pros and cons.

00:12:06.860 --> 00:12:10.380
Data plane analysis can find all the policies

00:12:10.380 --> 00:12:13.980
that hold for a single concrete environment,

00:12:13.980 --> 00:12:17.370
whereas control plane verification can check

00:12:17.370 --> 00:12:20.420
whether one policy holds for the entire failure

00:12:20.420 --> 00:12:22.420
model.

00:12:22.420 --> 00:12:24.660
So the strength of data plane analysis is

00:12:24.660 --> 00:12:27.140
actually to quickly cut down the candidate

00:12:27.140 --> 00:12:29.980
space, as with checking one single concrete

00:12:29.980 --> 00:12:32.780
environment, one can already rule out a lot

00:12:32.780 --> 00:12:35.260
of policies.

00:12:35.260 --> 00:12:38.080
And control plane verification is very good at

00:12:38.080 --> 00:12:40.860
verifying a small set of candidate policies

00:12:40.860 --> 00:12:44.400
and quickly identifying which belong to the

00:12:44.400 --> 00:12:47.340
specifications and which don't.

00:12:47.340 --> 00:12:50.690
So the natural question, or actually I already

00:12:50.690 --> 00:12:53.620
led to this, is why don't you combine the

00:12:53.620 --> 00:12:55.500
two approaches?

00:12:55.500 --> 00:12:59.020
And this is exactly what we do.

00:12:59.020 --> 00:13:03.110
So internally, config2spec consists of multiple

00:13:03.110 --> 00:13:04.100
modules.

00:13:04.100 --> 00:13:06.820
First of all, of a data plane analysis module and

00:13:06.820 --> 00:13:09.340
the control plane verification module,

00:13:09.340 --> 00:13:11.460
and it consists of a predictor.

00:13:11.460 --> 00:13:14.380
And this predictor dynamically decides whether to

00:13:14.380 --> 00:13:17.220
use one or the other, always favoring faster

00:13:17.220 --> 00:13:19.060
completion.

00:13:19.060 --> 00:13:23.080
So let's look at this at the high level.

00:13:23.080 --> 00:13:25.660
In the beginning, we start with the set of all

00:13:25.660 --> 00:13:27.980
possible policies as our candidate set

00:13:27.980 --> 00:13:30.060
for the specification.

00:13:30.060 --> 00:13:33.700
And this I try to illustrate with the blue area

00:13:33.700 --> 00:13:34.820
behind me.

00:13:34.820 --> 00:13:37.210
We start with data plane analysis, pick one

00:13:37.210 --> 00:13:39.860
concrete environment, see what policies hold

00:13:39.860 --> 00:13:43.300
for this environment, and intersect that with the

00:13:43.300 --> 00:13:44.520
candidate set.

00:13:44.520 --> 00:13:47.910
We continue, pick another concrete environment,

00:13:47.910 --> 00:13:48.720
and so on.

00:13:48.720 --> 00:13:52.830
We quickly manage to reduce the candidate set by

00:13:52.830 --> 00:13:53.620
a lot.

00:13:53.620 --> 00:13:56.800
However, we continue with this until kind of not

00:13:56.800 --> 00:13:59.060
much more progress can be made.

00:13:59.060 --> 00:14:02.300
The size of the candidate set stabilizes.

00:14:02.300 --> 00:14:04.560
And at this point, the predictor decides to

00:14:04.560 --> 00:14:06.840
switch from data plane analysis to control

00:14:06.840 --> 00:14:10.530
plane verification and starts to pick one policy

00:14:10.530 --> 00:14:13.200
after the other and verify them.

00:14:13.200 --> 00:14:15.140
It will check whether these policies hold for the

00:14:15.140 --> 00:14:15.920
failure model.

00:14:15.920 --> 00:14:17.660
Some won't, some will.

00:14:17.660 --> 00:14:22.120
And the continuous one policy after another until

00:14:22.120 --> 00:14:24.860
we have checked them all and config

00:14:24.860 --> 00:14:28.080
to spec terminates and we have found the full

00:14:28.080 --> 00:14:29.540
specification.

00:14:29.540 --> 00:14:32.480
So to make config to spec really work, we

00:14:32.480 --> 00:14:34.420
optimized both approaches.

00:14:34.420 --> 00:14:38.500
Following, I will just present the intuition.

00:14:38.500 --> 00:14:41.040
First of all, we can speed up data plane analysis

00:14:41.040 --> 00:14:43.260
or kind of the process of narrowing down the

00:14:43.260 --> 00:14:46.200
candidate set a lot by choosing the right

00:14:46.200 --> 00:14:48.340
environments to analyze.

00:14:48.340 --> 00:14:51.740
We do that based on the remaining candidate set.

00:14:51.740 --> 00:14:54.410
So we always pick the next environment that maximally

00:14:54.410 --> 00:14:56.240
disrupts the forwarding state with

00:14:56.240 --> 00:14:58.740
respect to those policies.

00:14:58.740 --> 00:15:01.980
To speed up the verification, we can kind of do

00:15:01.980 --> 00:15:03.140
three things.

00:15:03.140 --> 00:15:04.660
First of all, we can group policies.

00:15:04.660 --> 00:15:07.720
So instead of checking them one by one, we check

00:15:07.720 --> 00:15:09.340
them in small groups.

00:15:09.340 --> 00:15:12.820
Second, we can consider dependencies.

00:15:12.820 --> 00:15:15.810
For example, if we check a reachability between

00:15:15.810 --> 00:15:18.340
two points and we see that it doesn't hold,

00:15:18.340 --> 00:15:20.390
we don't need to check a waypointing policy

00:15:20.390 --> 00:15:22.540
between those points because we know if the

00:15:22.540 --> 00:15:25.840
reachability doesn't hold, the waypointing can't

00:15:25.840 --> 00:15:26.900
hold either.

00:15:26.900 --> 00:15:29.790
And as a last part, we can trim policies without

00:15:29.790 --> 00:15:31.300
even verifying them.

00:15:31.300 --> 00:15:34.360
So we can trim policies which cannot hold because

00:15:34.360 --> 00:15:36.420
of topological constraints.

00:15:36.420 --> 00:15:39.380
Just think of a failure model that allows for

00:15:39.380 --> 00:15:40.860
tooling failures.

00:15:40.860 --> 00:15:45.040
We have a topology that has two different paths

00:15:45.040 --> 00:15:47.900
between a given set of nodes.

00:15:47.900 --> 00:15:50.600
And we know that there can't be a reachability

00:15:50.600 --> 00:15:53.220
between those nodes under tooling failures

00:15:53.220 --> 00:15:55.340
if there are only two paths.

00:15:55.340 --> 00:15:58.120
So there's no point in verifying this policy.

00:15:58.120 --> 00:16:00.700
We know beforehand that it doesn't hold.

00:16:00.700 --> 00:16:04.410
So now, finally, let's look at how config2spec

00:16:04.410 --> 00:16:05.500
performs.

00:16:05.500 --> 00:16:08.110
To this end, we have fully implemented config2spec

00:16:08.110 --> 00:16:10.840
in about 5,000 lines of Python and Java code

00:16:10.840 --> 00:16:14.670
and we rely on two state-of-the-art tools, Batfish

00:16:14.670 --> 00:16:16.820
for data plane analysis and Minesweeper

00:16:16.820 --> 00:16:19.980
for control plane verification.

00:16:19.980 --> 00:16:23.090
To test config2spec, we have generated

00:16:23.090 --> 00:16:26.820
configurations using a tool called netcomplete.

00:16:26.820 --> 00:16:29.810
And we did this for three networks, a small, a

00:16:29.810 --> 00:16:31.700
medium, and a large one.

00:16:31.700 --> 00:16:33.740
Let's look at the runtime of config2spec.

00:16:33.740 --> 00:16:36.090
Let's look at how long it takes to actually find

00:16:36.090 --> 00:16:37.420
such a specification.

00:16:37.420 --> 00:16:39.830
Now, in the following, I will only show you the

00:16:39.830 --> 00:16:42.020
results for the largest topology, which

00:16:42.020 --> 00:16:44.900
has roughly 160 routers.

00:16:44.900 --> 00:16:47.320
For all the other topologies, the results were

00:16:47.320 --> 00:16:47.980
similar.

00:16:47.980 --> 00:16:50.340
Obviously, it was faster, but they were

00:16:50.340 --> 00:16:51.980
qualitatively similar.

00:16:51.980 --> 00:16:56.540
On the y-axis, we show the runtime in hours.

00:16:56.540 --> 00:16:59.830
We make a difference between the BGP and the OSPF

00:16:59.830 --> 00:17:02.800
configurations because OSPF configs are

00:17:02.800 --> 00:17:06.360
much easier to deal with and hence faster.

00:17:06.360 --> 00:17:09.320
In addition, we split up the time that config2spec

00:17:09.320 --> 00:17:11.600
used into the time it used for data plane

00:17:11.600 --> 00:17:16.650
analysis and the time it used for control plane

00:17:16.650 --> 00:17:18.660
verification.

00:17:18.660 --> 00:17:22.260
We ran the analysis for three different failure

00:17:22.260 --> 00:17:25.460
models for up to one, two, and three link

00:17:25.460 --> 00:17:26.460
failures.

00:17:26.460 --> 00:17:30.180
Now, there are two special cases to consider.

00:17:30.180 --> 00:17:32.910
The first special case are failure models

00:17:32.910 --> 00:17:35.300
consisting of few environments.

00:17:35.300 --> 00:17:38.320
Interestingly, we never use verification in cases

00:17:38.320 --> 00:17:40.260
where we only allow up to one link

00:17:40.260 --> 00:17:41.260
failure.

00:17:41.260 --> 00:17:43.370
And this is due to the fact that there are only

00:17:43.370 --> 00:17:45.420
very few concrete environments, but a

00:17:45.420 --> 00:17:47.660
lot of candidate policies.

00:17:47.660 --> 00:17:50.150
So the predictor decides that it is faster to

00:17:50.150 --> 00:17:52.860
just iterate through all of the environments

00:17:52.860 --> 00:17:56.400
instead of trying to verify the policies.

00:17:56.400 --> 00:17:59.180
On the other hand, the other special case are

00:17:59.180 --> 00:18:01.540
situations where we allow for a lot of

00:18:01.540 --> 00:18:03.640
link failures.

00:18:03.640 --> 00:18:06.750
Because then the trimming is extremely efficient

00:18:06.750 --> 00:18:09.700
and there are actually not that many candidate

00:18:09.700 --> 00:18:11.620
policies left that we have to check.

00:18:11.620 --> 00:18:14.150
So it's faster to actually just go through the

00:18:14.150 --> 00:18:16.620
policies and check them one by one instead

00:18:16.620 --> 00:18:21.640
of going through all the environments.

00:18:21.640 --> 00:18:23.610
The worst case is somehow in between where we

00:18:23.610 --> 00:18:25.400
have a lot of concrete environments to

00:18:25.400 --> 00:18:29.200
consider and we also cannot discard many policies

00:18:29.200 --> 00:18:32.340
because of topological constraints.

00:18:32.340 --> 00:18:36.450
In that case, it took almost 14 hours for config

00:18:36.450 --> 00:18:39.420
to spec to find the specification.

00:18:39.420 --> 00:18:42.840
And as you can see, most of the time is spent verifying

00:18:42.840 --> 00:18:43.980
the policies.

00:18:43.980 --> 00:18:47.530
Obviously, if you have a larger topology, it will

00:18:47.530 --> 00:18:48.700
take longer.

00:18:48.700 --> 00:18:51.190
However, note that you don't run config to spec

00:18:51.190 --> 00:18:53.180
whenever you perform a configuration

00:18:53.180 --> 00:18:54.440
change.

00:18:54.440 --> 00:18:56.820
You run config to spec once or twice to learn the

00:18:56.820 --> 00:18:58.980
specification and then you can use that

00:18:58.980 --> 00:19:04.220
specification for verification, synthesis and so

00:19:04.220 --> 00:19:04.860
on.

00:19:04.860 --> 00:19:09.100
With that, we're already at the end of this talk.

00:19:09.100 --> 00:19:12.000
So I presented to you config to spec, a system

00:19:12.000 --> 00:19:14.400
that takes on the challenging task of

00:19:14.400 --> 00:19:15.520
automatically

00:19:15.520 --> 00:19:19.300
mining a specification from the configuration and

00:19:19.300 --> 00:19:20.940
the failure model.

00:19:20.940 --> 00:19:23.400
And after all this, you might think, great, we

00:19:23.400 --> 00:19:25.460
have the network specification and now

00:19:25.460 --> 00:19:26.460
what?

00:19:26.460 --> 00:19:29.080
First of all, the learn specification is useful

00:19:29.080 --> 00:19:31.140
for verification as explained in the

00:19:31.140 --> 00:19:32.140
beginning.

00:19:32.140 --> 00:19:36.260
However, it's also useful beyond verification.

00:19:36.260 --> 00:19:41.860
For example, one can use it for what if and analyzes.

00:19:41.860 --> 00:19:44.180
So you can compute the specifications for

00:19:44.180 --> 00:19:47.020
different configurations and check what happens

00:19:47.020 --> 00:19:49.500
if you do this or that.

00:19:49.500 --> 00:19:53.210
Second, you can use it also for config streamlining,

00:19:53.210 --> 00:19:56.300
which means you learn the specification for

00:19:56.300 --> 00:19:58.820
an existing configuration and then you want to

00:19:58.820 --> 00:20:01.060
synthesize a new configuration that has

00:20:01.060 --> 00:20:04.290
the same behavior, so the same spec, but uses a

00:20:04.290 --> 00:20:08.340
different mix of routing protocols or protocol

00:20:08.340 --> 00:20:09.780
features.

00:20:09.780 --> 00:20:13.480
And finally, config to spec can help you just

00:20:13.480 --> 00:20:17.500
better understand your network's behavior.

00:20:17.500 --> 00:20:20.260
So if I raised your interest, I really invite you

00:20:20.260 --> 00:20:22.740
to check out our NSDI 20 paper as there

00:20:22.740 --> 00:20:25.960
are more details to config to spec than what I

00:20:25.960 --> 00:20:27.340
covered today.

00:20:27.340 --> 00:20:29.790
In addition, we're still working on config to

00:20:29.790 --> 00:20:31.460
spec, trying to improve it.

00:20:31.460 --> 00:20:33.920
So if you have any opinion on it, if you think

00:20:33.920 --> 00:20:36.180
this is useful, please let us know.

00:20:36.180 --> 00:20:38.980
So please reach out to us either to my email

00:20:38.980 --> 00:20:41.220
address or visit our website.

00:20:41.220 --> 00:20:44.460
Thanks a lot for your attention and I'm happy to

00:20:44.460 --> 00:20:46.140
take any questions.

