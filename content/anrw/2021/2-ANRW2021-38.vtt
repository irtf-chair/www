WEBVTT

00:00:00.001 --> 00:00:04.040
Hello and welcome to this presentation about

00:00:04.040 --> 00:00:07.480
leveraging the ZeroRTT Convert protocol to

00:00:07.480 --> 00:00:10.960
improve Wi-Fi and cellular convergence.

00:00:10.960 --> 00:00:13.430
Behind this long title, there is an experiment I

00:00:13.430 --> 00:00:14.840
would like to describe.

00:00:14.840 --> 00:00:18.820
But first, I will start by describing why we

00:00:18.820 --> 00:00:21.200
wanted to do this experiment, simply by

00:00:21.200 --> 00:00:24.640
showing the current and future situation.

00:00:24.640 --> 00:00:27.500
I will also present which technologies are

00:00:27.500 --> 00:00:30.240
available today to solve the problem.

00:00:30.240 --> 00:00:33.290
Then I will be able to briefly expose the main

00:00:33.290 --> 00:00:36.880
results we got before making some conclusions.

00:00:36.880 --> 00:00:39.300
For technical reasons, it is not possible for me

00:00:39.300 --> 00:00:41.220
to know the background of the origins.

00:00:41.220 --> 00:00:44.330
I hope you don't mind if I spend a bit more time

00:00:44.330 --> 00:00:47.640
explaining the current situations, issues

00:00:47.640 --> 00:00:50.920
mobile operators have and the different

00:00:50.920 --> 00:00:54.840
technologies available today to solve that.

00:00:54.840 --> 00:00:57.100
Feel free to get a coffee if you already know all

00:00:57.100 --> 00:00:59.300
of that, but at least, and I hope, everybody

00:00:59.300 --> 00:01:04.320
should be able to understand the second part.

00:01:04.320 --> 00:01:07.310
It is not difficult to believe the traffic on

00:01:07.310 --> 00:01:09.880
cellular networks is increasing.

00:01:09.880 --> 00:01:13.860
According to this report from Ericsson, it will

00:01:13.860 --> 00:01:17.120
continue to grow over the years.

00:01:17.120 --> 00:01:19.430
Already today, the cellular traffic is

00:01:19.430 --> 00:01:20.440
significant.

00:01:20.440 --> 00:01:23.790
For a third of the operators here on the graph,

00:01:23.790 --> 00:01:27.080
the averaged data usage per reported SIM per

00:01:27.080 --> 00:01:31.640
month is already above 10 gigs.

00:01:31.640 --> 00:01:34.190
A simple solution to cope with this increase of

00:01:34.190 --> 00:01:36.160
traffic for the operators is to improve

00:01:36.160 --> 00:01:39.960
the network, to avoid any saturation of course.

00:01:39.960 --> 00:01:43.750
Yes, but the average revenue of these operators

00:01:43.750 --> 00:01:45.200
is not growing.

00:01:45.200 --> 00:01:48.090
Despite the pandemic we got, I don't know if you

00:01:48.090 --> 00:01:50.480
remember, people were forced to stay

00:01:50.480 --> 00:01:52.560
home to save the world.

00:01:52.560 --> 00:01:56.790
Anyway, despite the exceptional situation in 2020,

00:01:56.790 --> 00:01:59.080
the global cellular traffic this

00:01:59.080 --> 00:02:03.760
year increased but not the revenue.

00:02:03.760 --> 00:02:06.720
If we have to reduce the cost, then another

00:02:06.720 --> 00:02:09.290
solution is to use the existing fixed

00:02:09.290 --> 00:02:11.520
infrastructure.

00:02:11.520 --> 00:02:16.360
Indeed, millions of Wi-Fi hotspots are already

00:02:16.360 --> 00:02:20.320
available in many different places.

00:02:20.320 --> 00:02:23.270
You might have heard about solutions like Phon or

00:02:23.270 --> 00:02:25.600
Eduroam, or simply your operator's

00:02:25.600 --> 00:02:29.880
hotspot, also called Free Wi-Fi.

00:02:29.880 --> 00:02:34.050
Many operators have already deployed their own

00:02:34.050 --> 00:02:38.360
hotspot solution just for their clients.

00:02:38.360 --> 00:02:40.980
But today, the wireless broadband alliance,

00:02:40.980 --> 00:02:43.680
supported by many different network operators

00:02:43.680 --> 00:02:47.950
in the world, is looking at a global solution

00:02:47.950 --> 00:02:51.080
under the name of Open Roaming.

00:02:51.080 --> 00:02:54.810
Operators would share resources in order to

00:02:54.810 --> 00:02:58.360
relieve cellular traffic congestion.

00:02:58.360 --> 00:02:59.880
But there are drawbacks.

00:02:59.880 --> 00:03:01.860
As an end user, would you be ready to be

00:03:01.860 --> 00:03:04.290
disconnected when switching from one network to

00:03:04.290 --> 00:03:05.880
another?

00:03:05.880 --> 00:03:11.120
Or potentially switch to more limited networks?

00:03:11.120 --> 00:03:14.110
Did you not already disconnect your device from a

00:03:14.110 --> 00:03:16.480
Wi-Fi access point because a cellular

00:03:16.480 --> 00:03:19.160
network was better at that time?

00:03:19.160 --> 00:03:22.280
A solution to that problem would then be to use

00:03:22.280 --> 00:03:25.000
multiple networks at the same time.

00:03:25.000 --> 00:03:28.760
Multipath TCP can help you there.

00:03:28.760 --> 00:03:32.980
MPTCP is an extension to TCP and it's

00:03:32.980 --> 00:03:37.600
standardized in the RHC 8684.

00:03:37.600 --> 00:03:41.240
To describe MPTCP, we can do that in one sentence.

00:03:41.240 --> 00:03:44.680
It allows to exchange data for a single

00:03:44.680 --> 00:03:49.220
connection over different paths, simultaneously

00:03:49.220 --> 00:03:50.080
or not.

00:03:50.080 --> 00:03:53.040
Instead of having one connection limited to one

00:03:53.040 --> 00:03:55.480
path, the same connection can go over

00:03:55.480 --> 00:03:57.240
multiple paths.

00:03:57.240 --> 00:04:01.920
In other words, you can then have more redundancies.

00:04:01.920 --> 00:04:05.010
But you can also have more bandwidths and more

00:04:05.010 --> 00:04:07.520
many things like supporting handover

00:04:07.520 --> 00:04:11.290
and mobility use case, like here switching from

00:04:11.290 --> 00:04:14.320
one weak network to another, where all

00:04:14.320 --> 00:04:19.560
the signals are quite valuable.

00:04:19.560 --> 00:04:22.880
But this extension to TCP needs to be supported

00:04:22.880 --> 00:04:25.520
by both the client and the server.

00:04:25.520 --> 00:04:28.340
On the client side, some smartphones already

00:04:28.340 --> 00:04:30.720
support it, like the one from Apple since

00:04:30.720 --> 00:04:34.730
2013, but also some others from Samsung, LG and

00:04:34.730 --> 00:04:37.440
more, even if it's restricted to some

00:04:37.440 --> 00:04:38.440
applications.

00:04:38.440 --> 00:04:43.170
As shown on the MPTCP.io website, on the server

00:04:43.170 --> 00:04:46.880
side, the support is not very significant

00:04:46.880 --> 00:04:49.500
for the moment, for various reasons we are

00:04:49.500 --> 00:04:51.160
actively working on it.

00:04:51.160 --> 00:04:55.480
But wait, again, there is a solution.

00:04:55.480 --> 00:04:59.600
A TCP proxy can be used at operators' network to

00:04:59.600 --> 00:05:01.800
bring MPTCP support.

00:05:01.800 --> 00:05:06.240
But what kind of proxy should we use?

00:05:06.240 --> 00:05:10.350
Here we are interested by a new protocol, 0RTT

00:05:10.350 --> 00:05:12.520
TCP convert protocol.

00:05:12.520 --> 00:05:16.960
It eases the deployment of TCP extensions like MPTCP.

00:05:16.960 --> 00:05:20.750
Technically, it uses TCP fast open, with fallback

00:05:20.750 --> 00:05:24.120
support of course, to carry information about

00:05:24.120 --> 00:05:26.280
the end server.

00:05:26.280 --> 00:05:28.160
Note that the client and server proxies can

00:05:28.160 --> 00:05:30.120
exchange additional data in the three-way

00:05:30.120 --> 00:05:33.990
handshake, for example, to support an additional

00:05:33.990 --> 00:05:35.960
authentication path.

00:05:35.960 --> 00:05:39.750
If we compare the flow to initiate the connection,

00:05:39.750 --> 00:05:42.960
it is a lot shorter than solutions like Socks

00:05:42.960 --> 00:05:48.960
Vify using Coria with their Giga LTE.

00:05:48.960 --> 00:05:52.790
In the end, all the solutions I presented here,

00:05:52.790 --> 00:05:56.160
combining MPTCP with the 0RTT convert,

00:05:56.160 --> 00:05:58.800
is already part of the future 5G.

00:05:58.800 --> 00:06:02.950
Indeed, in the 3GPP release 16, an ATSSS function

00:06:02.950 --> 00:06:04.040
is defined.

00:06:04.040 --> 00:06:10.480
ATSSS stands for Access Traffic Steering Switching

00:06:10.480 --> 00:06:13.800
Splitting.

00:06:13.800 --> 00:06:16.960
And it combines our two technologies to play a

00:06:16.960 --> 00:06:19.960
key role in managing data traffic between

00:06:19.960 --> 00:06:25.340
3GPP, so 5G, 4G, and other networks, and non-3GPP

00:06:25.340 --> 00:06:29.240
networks like Wi-Fi or private networks.

00:06:29.240 --> 00:06:30.960
Enough with the introduction.

00:06:30.960 --> 00:06:34.380
Let's have a look at our experiments and at the

00:06:34.380 --> 00:06:37.400
main results we extracted from them.

00:06:37.400 --> 00:06:40.500
From a high-level viewpoint, we have a smartphone

00:06:40.500 --> 00:06:42.240
connected to two networks.

00:06:42.240 --> 00:06:46.880
The first one is a DSL network connected via Wi-Fi.

00:06:46.880 --> 00:06:50.600
It is a home network, unfortunately limited to 10Mbps.

00:06:50.600 --> 00:06:54.810
I say "unfortunately" because it is my home

00:06:54.810 --> 00:06:56.440
connection.

00:06:56.440 --> 00:06:59.560
The other network is a public LTE network, giving

00:06:59.560 --> 00:07:02.480
more than 20Gbps, but it is variable.

00:07:02.480 --> 00:07:05.470
A 0RTT convert server is deployed on the internet,

00:07:05.470 --> 00:07:07.760
and the phone is simply playing live video

00:07:07.760 --> 00:07:12.240
streams from Twitch.

00:07:12.240 --> 00:07:16.290
Specifically, the smartphone is a Xiaomi Pocophone

00:07:16.290 --> 00:07:21.000
F1 with a modified kernel to have MPCP support.

00:07:21.000 --> 00:07:24.890
A modified version of ThreadOsup supporting the 0RTT

00:07:24.890 --> 00:07:27.680
TCP convert protocol is installed.

00:07:27.680 --> 00:07:30.910
Please note that all the material has been open-source,

00:07:30.910 --> 00:07:32.560
and a nice guide is available

00:07:32.560 --> 00:07:35.800
on the TSRS website.

00:07:35.800 --> 00:07:39.560
For the TCP proxy server side, we took a server

00:07:39.560 --> 00:07:42.840
called HAG used for hybrid networks.

00:07:42.840 --> 00:07:45.270
It follows broadband foreign standards and

00:07:45.270 --> 00:07:48.680
supports 10,000 users with 10Gbps throughput

00:07:48.680 --> 00:07:53.440
and 300,000 connections per server.

00:07:53.440 --> 00:07:56.550
Of course, here it has been modified to support

00:07:56.550 --> 00:07:58.720
the 0RTT convert protocol.

00:07:58.720 --> 00:08:02.790
For this experiment, it has been deployed in the

00:08:02.790 --> 00:08:05.120
cloud close by at Amazon.

00:08:05.120 --> 00:08:08.090
Regarding the results, we can focus here on two

00:08:08.090 --> 00:08:09.040
scenarios.

00:08:09.040 --> 00:08:14.440
For the first one, the goal is to support handovers.

00:08:14.440 --> 00:08:17.900
Here we are disconnected from the Wi-Fi access

00:08:17.900 --> 00:08:20.440
point between the two green lines.

00:08:20.440 --> 00:08:24.560
When we are connected to the fixed network and

00:08:24.560 --> 00:08:27.800
the Wi-Fi, we use it in priority.

00:08:27.800 --> 00:08:30.660
Here the DSL network can cope with the request

00:08:30.660 --> 00:08:33.360
speed so the traffic is fully offloaded to

00:08:33.360 --> 00:08:38.360
the fixed network, excellent for the operators.

00:08:38.360 --> 00:08:41.250
Here in the second scenario, the DSL network is

00:08:41.250 --> 00:08:43.800
not enough to watch a 4K live stream.

00:08:43.800 --> 00:08:47.190
We can clearly see on the graph before and after

00:08:47.190 --> 00:08:50.320
the green lines that the cellular network

00:08:50.320 --> 00:08:53.520
is used in a second priority.

00:08:53.520 --> 00:08:55.520
The main point here is that it is used in

00:08:55.520 --> 00:08:57.920
addition to provide enough bandwidth to play

00:08:57.920 --> 00:09:01.080
the 4K live stream without delays.

00:09:01.080 --> 00:09:04.960
It then helps to improve the user experience

00:09:04.960 --> 00:09:08.920
while still minimizing its utilization.

00:09:08.920 --> 00:09:12.880
That's good for the end user.

00:09:12.880 --> 00:09:16.340
It is already time for conclusion.

00:09:16.340 --> 00:09:20.290
This proof of concept shows that the future ATS-SS

00:09:20.290 --> 00:09:21.720
already works.

00:09:21.720 --> 00:09:25.280
On one hand, it helps mobile operators to reduce

00:09:25.280 --> 00:09:28.320
their mobile traffic while also helping

00:09:28.320 --> 00:09:31.120
to improve the end user experience.

00:09:31.120 --> 00:09:34.770
MPCP and the ZeroRTT convert can play a role in

00:09:34.770 --> 00:09:38.160
Wi-Fi and cellular convergence today in

00:09:38.160 --> 00:09:45.640
4G networks and tomorrow in all 5G networks tend

00:09:45.640 --> 00:09:48.080
to the ATS-SS.

00:09:50.440 --> 00:09:54.850
If you have any questions, please share that with

00:09:54.850 --> 00:09:55.440
me.

00:09:55.440 --> 00:10:00.760
But you can also contact me by email or Twitter.

