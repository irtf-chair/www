WEBVTT

00:00:00.001 --> 00:00:05.280
Hello everyone, welcome to our presentation. I am

00:00:05.280 --> 00:00:07.160
Tianxiang Dai, I am here to present our

00:00:07.160 --> 00:00:11.240
work DNS over TCP considered vulnerable. This is

00:00:11.240 --> 00:00:14.800
a work together with Dr. Haya Shuman and

00:00:14.800 --> 00:00:17.280
Professor Michael Weissner. We are all from

00:00:17.280 --> 00:00:19.400
German National Research Center for Applied

00:00:19.400 --> 00:00:24.160
Cybersecurity Athena in Darmstadt, Germany. In

00:00:24.160 --> 00:00:26.400
this presentation, we will first briefly

00:00:26.400 --> 00:00:28.790
introduce our motivation about this work and

00:00:28.790 --> 00:00:31.840
afterwards we show our evaluation in the internet.

00:00:31.840 --> 00:00:35.660
Based on the evaluation results, we present a

00:00:35.660 --> 00:00:39.040
potential exploit. Afterwards, we propose

00:00:39.040 --> 00:00:45.600
some court measures and then conclude our work.

00:00:45.600 --> 00:00:50.470
Our motivation is based on our previous work on

00:00:50.470 --> 00:00:53.800
DNS over UDP. So we all know that DNS over

00:00:53.800 --> 00:00:56.520
UDP is vulnerable to IP fragmentation attacks. So

00:00:56.520 --> 00:00:58.680
then another question is that what about

00:00:58.680 --> 00:01:02.530
DNS over TCP? Is it also vulnerable to IP fragmentation

00:01:02.530 --> 00:01:06.480
attacks or not? So we searched

00:01:06.480 --> 00:01:08.870
some related works to find out that it is well

00:01:08.870 --> 00:01:11.120
believed that IP fragmentation attacks

00:01:11.120 --> 00:01:15.660
doesn't work with TCP. For example, there is a

00:01:15.660 --> 00:01:18.920
draft best common practice, IP fragmentation

00:01:18.920 --> 00:01:21.760
considered fragile. It says there is alternatives

00:01:21.760 --> 00:01:24.120
to IP fragmentation which is using TCP with

00:01:24.120 --> 00:01:29.030
PM2D. There is also another best common practice

00:01:29.030 --> 00:01:33.320
in draft, fragmentation avoidance in DNS.

00:01:33.320 --> 00:01:37.330
It says TCP is considered a resistance against IP

00:01:37.330 --> 00:01:41.040
fragmentation attacks. Also, in last year's

00:01:41.040 --> 00:01:45.930
DNS fragment day, which is the event among the

00:01:45.930 --> 00:01:50.120
DNS operations community, it says TCP

00:01:50.120 --> 00:01:55.070
normally implements PM2D and can avoid IP fragmentation

00:01:55.070 --> 00:01:58.920
of TCP segments. So it is real?

00:01:58.920 --> 00:02:07.740
Does DNS over TCP really protect against IP fragmentation

00:02:07.740 --> 00:02:11.240
attacks? To check this, we designed

00:02:11.240 --> 00:02:14.230
our evaluation in the internet. So we want to

00:02:14.230 --> 00:02:16.880
trigger fragmentation over TCP on name

00:02:16.880 --> 00:02:20.640
servers in the internet and then compare with UDP.

00:02:20.640 --> 00:02:23.160
We designed follow evaluation. So we

00:02:23.160 --> 00:02:26.620
have our resolver and we find some name servers

00:02:26.620 --> 00:02:29.600
in the internet. We first establish a TCP

00:02:29.600 --> 00:02:33.330
connection to the name server and then send the

00:02:33.330 --> 00:02:36.360
DNS query over the TCP connection. After

00:02:36.360 --> 00:02:39.440
getting the response, we send ICMP packet to big

00:02:39.440 --> 00:02:41.880
to indicating our MTU on the road is

00:02:41.880 --> 00:02:48.840
too small and we wait for the DNS response retransmission.

00:02:48.840 --> 00:02:51.200
As a comparison, we do similar

00:02:51.200 --> 00:02:55.360
evaluation over UDP, but considering UDP is the

00:02:55.360 --> 00:02:58.840
connectionless protocol, so it's a little

00:02:58.840 --> 00:03:01.360
bit different. We first send the DNS request and

00:03:01.360 --> 00:03:03.400
then get the response. Afterwards, we

00:03:03.400 --> 00:03:05.890
send ICMP packet to big instead of waiting for

00:03:05.890 --> 00:03:09.000
the retransmission since there's no UDP

00:03:09.000 --> 00:03:12.750
doesn't do retransmission. So we send another DNS

00:03:12.750 --> 00:03:15.600
request, the same as before, and wait

00:03:15.600 --> 00:03:21.010
for the second DNS response and check if it's

00:03:21.010 --> 00:03:26.120
fragmented or not. Then what's the result?

00:03:26.120 --> 00:03:31.310
We tested against Alexa top 100,000 domains. In

00:03:31.310 --> 00:03:35.040
the end, we get about 500 domains fragmented

00:03:35.040 --> 00:03:39.180
over TCP. As a comparison, there are over 9,000

00:03:39.180 --> 00:03:41.840
domains fragmented over UDP, but this

00:03:41.840 --> 00:03:45.880
is not surprising. We all know UDP is vulnerable

00:03:45.880 --> 00:03:49.320
to IP fragmentation attacks. When we dig into

00:03:49.320 --> 00:03:52.920
more details about the fragmented domains over

00:03:52.920 --> 00:03:55.760
TCP, we find out that the majority of

00:03:55.760 --> 00:03:59.550
them are only vulnerable to TCP. There's about 20%

00:03:59.550 --> 00:04:02.480
vulnerable to both and 80% vulnerable

00:04:02.480 --> 00:04:07.960
only to TCP. When we check among those domains

00:04:07.960 --> 00:04:13.040
only vulnerable to fragmentation over TCP,

00:04:13.040 --> 00:04:19.200
we find out that there are even 76 domains which

00:04:19.200 --> 00:04:23.400
have TCP bit set when we tested over

00:04:23.400 --> 00:04:29.820
UDP. What does that mean? TCP bit means truncated.

00:04:29.820 --> 00:04:33.800
It is set when the DNS payload is too big

00:04:33.800 --> 00:04:38.060
for the UDP or when the server is very limited.

00:04:38.060 --> 00:04:41.960
In any case, it means the name server has

00:04:41.960 --> 00:04:46.950
a preference over TCP. So it's the name server

00:04:46.950 --> 00:04:50.960
will try to use TCP instead of UDP. So that

00:04:50.960 --> 00:04:55.800
means there are just these 76 domains, they try

00:04:55.800 --> 00:04:59.720
to use TCP, which the name server thought

00:04:59.720 --> 00:05:03.480
is better, but actually it's vulnerable to IP

00:05:03.480 --> 00:05:10.360
fragmentation attacks, which make it worse.

00:05:10.360 --> 00:05:14.600
So we also check, find out that TCP tends to get

00:05:14.600 --> 00:05:18.040
smaller fragments than UDP. We find

00:05:18.040 --> 00:05:21.990
out that there are about 40% domains which

00:05:21.990 --> 00:05:26.080
fragments over TCP, they have fragments smaller

00:05:26.080 --> 00:05:33.330
than 290. While over UDP, there are about over 90%

00:05:33.330 --> 00:05:38.280
domains has fragments over 540. So

00:05:38.280 --> 00:05:42.590
what does this mean? Smaller fragments means more

00:05:42.590 --> 00:05:44.960
payloads are in the second fragment or

00:05:44.960 --> 00:05:49.070
other fragments. So that means more payloads are

00:05:49.070 --> 00:05:53.560
injectable. So this is resulting stronger

00:05:53.560 --> 00:06:00.120
exploits, which makes things worse. Based on our

00:06:00.120 --> 00:06:03.840
previous evaluation, we proposed a

00:06:03.840 --> 00:06:08.800
potential exploit. So as we presented here, this

00:06:08.800 --> 00:06:12.760
is the example of a fragmented DNS packet

00:06:12.760 --> 00:06:16.510
over TCP. So the packet above is the first

00:06:16.510 --> 00:06:20.240
fragment, the packet in the bottom is the

00:06:20.240 --> 00:06:23.920
second fragment. So we can inject a malicious

00:06:23.920 --> 00:06:27.280
payload into DNS via IP fragmentation over

00:06:27.280 --> 00:06:36.260
TCP. So as we know, so the original DNS cache

00:06:36.260 --> 00:06:44.440
poisoning is using flooding to bypass the

00:06:44.440 --> 00:06:49.680
DNS challenge, which is the DNS transaction ID.

00:06:49.680 --> 00:06:54.000
It's the 16 bit, it can be easily flooded.

00:06:54.000 --> 00:07:00.790
So to secure it, we further introduce some

00:07:00.790 --> 00:07:06.520
challenges in UDP. Also in UDP source port,

00:07:06.520 --> 00:07:11.290
so here in TCP2. So the TCP challenge here at the

00:07:11.290 --> 00:07:15.400
TCP source port. Here we show the packet

00:07:15.400 --> 00:07:18.420
from the nameserver to the resolver, so it's the

00:07:18.420 --> 00:07:21.400
destination port. And also the TCP sequence

00:07:21.400 --> 00:07:23.830
number and acknowledgement number, both of them

00:07:23.830 --> 00:07:26.040
are 32 bits, so it's believed to be really

00:07:26.040 --> 00:07:31.520
hard to spoof. But as we can see, both of these

00:07:31.520 --> 00:07:34.040
challenges, the TCP challenge and the

00:07:34.040 --> 00:07:37.450
DNS challenge, they are in the first fragment. So

00:07:37.450 --> 00:07:42.080
that means if we can trigger fragmentation,

00:07:42.080 --> 00:07:44.420
we don't need to take care of them. They're in

00:07:44.420 --> 00:07:46.640
the first fragment. We only need to spoof

00:07:46.640 --> 00:07:50.110
the second fragment. But when we try to spoof the

00:07:50.110 --> 00:07:52.680
second fragment, we only need to take

00:07:52.680 --> 00:07:57.080
care of the IP challenge, which is the IP ID.

00:07:57.080 --> 00:08:00.160
There are many works about making, there

00:08:00.160 --> 00:08:03.930
are many works using, make use of IP IDs. I

00:08:03.930 --> 00:08:07.640
wouldn't dig into details here, but we did

00:08:07.640 --> 00:08:10.980
a quick check. We find out that there are even

00:08:10.980 --> 00:08:15.120
2000 domains still using globally sequential

00:08:15.120 --> 00:08:21.490
IP IDs for TCP. That means they use the global

00:08:21.490 --> 00:08:26.120
counter for all the TCP connections. So that

00:08:26.120 --> 00:08:29.160
means the attacker can just using a second

00:08:29.160 --> 00:08:31.840
machine to probe the IP IDs and do a just

00:08:31.840 --> 00:08:35.350
simple linear regression. And then he can easily

00:08:35.350 --> 00:08:38.240
guess the IP ID, which makes the exploit

00:08:38.240 --> 00:08:47.040
really workable. So what are the countermeasures?

00:08:47.040 --> 00:08:48.640
We propose the countermeasures in different

00:08:48.640 --> 00:08:53.250
layers. For example, for IP, the easy dirty way

00:08:53.250 --> 00:08:56.800
is just to filter the fragments or just

00:08:56.800 --> 00:08:59.350
filter the small fragments like Google do. Google

00:08:59.350 --> 00:09:01.360
filter all the small fragments smaller

00:09:01.360 --> 00:09:06.250
than 500, so make it less vulnerable. But

00:09:06.250 --> 00:09:10.320
sometimes to filter the fragment will make

00:09:10.320 --> 00:09:13.870
the network down or doesn't work well. So another

00:09:13.870 --> 00:09:16.440
way is just to randomize the IP IDs

00:09:16.440 --> 00:09:19.590
to make it hard to spoof. But still, sometimes it's

00:09:19.590 --> 00:09:21.880
still vulnerable to some side channel

00:09:21.880 --> 00:09:27.040
attacks like before. Another way is to disable PMTOD

00:09:27.040 --> 00:09:30.720
in TCP layer. So there are research

00:09:30.720 --> 00:09:34.270
works find out that PMTOD is not really useful.

00:09:34.270 --> 00:09:37.240
So we can just disable it and that's we can

00:09:37.240 --> 00:09:41.940
just filter as they may pack it too big. Another

00:09:41.940 --> 00:09:45.200
way to countermeasure these attacks is to

00:09:45.200 --> 00:09:47.990
just to enable DNSSEC because DNSSEC is like

00:09:47.990 --> 00:09:52.360
final solution to all DNS cache poison attacks.

00:09:52.360 --> 00:09:55.480
But we just need to make sure that DNSSEC is

00:09:55.480 --> 00:09:58.320
configured properly. There are a few other

00:09:58.320 --> 00:10:02.310
works about DNS misconfigurations which make it

00:10:02.310 --> 00:10:05.720
even vulnerable when DNSSEC is enabled.

00:10:05.720 --> 00:10:14.190
So make sure. Then our conclusions. We find out

00:10:14.190 --> 00:10:15.880
that DNS over TCP is still vulnerable

00:10:15.880 --> 00:10:19.760
to IP fragmentation attacks and we also doubt

00:10:19.760 --> 00:10:23.560
that if it's really good to recommend using

00:10:23.560 --> 00:10:29.350
TCP to avoid fragmentation. That's it. Thank you

00:10:29.350 --> 00:10:29.840
so much.

00:10:29.840 --> 00:10:30.840
[End of Audio]

00:10:30.840 --> 00:10:31.840
Duration 10 minutes

00:10:31.840 --> 00:10:31.840
1

