WEBVTT

00:00:00.001 --> 00:00:06.170
Hi everyone, my name is Ali. I am a computer

00:00:06.170 --> 00:00:07.880
science professor and I have been working

00:00:07.880 --> 00:00:11.020
on streaming media since my PhD years. The topic

00:00:11.020 --> 00:00:12.760
for today is the very recent developments

00:00:12.760 --> 00:00:15.590
in the streaming space, in particular the common

00:00:15.590 --> 00:00:17.640
media client and media server data

00:00:17.640 --> 00:00:20.170
specs coming out of the Consumer Technology

00:00:20.170 --> 00:00:22.140
Association. These are the two specs that

00:00:22.140 --> 00:00:24.420
might have a fundamental impact on media

00:00:24.420 --> 00:00:26.920
distribution. I will give a brief overview of

00:00:26.920 --> 00:00:27.560
where we are

00:00:27.560 --> 00:00:34.200
today, how we got here, and where we go next.

00:00:34.200 --> 00:00:36.680
Without a doubt, streaming media is a big part of

00:00:36.680 --> 00:00:38.640
our lives. With more efficient media

00:00:38.640 --> 00:00:41.700
codecs, faster internet access, streaming any

00:00:41.700 --> 00:00:45.080
content we want is quite easy today. HTTP

00:00:45.080 --> 00:00:47.500
played an important role in this too. Back in the

00:00:47.500 --> 00:00:49.640
day, it all started with progressive

00:00:49.640 --> 00:00:51.720
download which allowed us to play the media

00:00:51.720 --> 00:00:53.920
before having to download the entire media

00:00:53.920 --> 00:00:56.600
file. With sufficient bandwidth, this was a much

00:00:56.600 --> 00:00:58.600
better experience over the download

00:00:58.600 --> 00:01:01.960
and play approach. Following that, with some

00:01:01.960 --> 00:01:03.880
indexing tricks and the use of byte range

00:01:03.880 --> 00:01:08.270
requests, seeking an immediate timeline was made

00:01:08.270 --> 00:01:11.040
possible, and servers also got a bit

00:01:11.040 --> 00:01:13.750
smarter. Yet the most important leap came out

00:01:13.750 --> 00:01:16.840
about 15 years ago with chunked streaming,

00:01:16.840 --> 00:01:20.470
which enabled live streaming over HTTP and splicing

00:01:20.470 --> 00:01:22.920
arbitrary content for things like

00:01:22.920 --> 00:01:26.000
an insertion. The natural extension to chunked

00:01:26.000 --> 00:01:28.320
streaming was to generate multiple versions

00:01:28.320 --> 00:01:30.680
of the content and offer rate switching

00:01:30.680 --> 00:01:34.000
capability, in other words, adaptation capability

00:01:34.000 --> 00:01:34.840
to streaming

00:01:34.840 --> 00:01:40.120
clients. Today, all major streaming platforms use

00:01:40.120 --> 00:01:43.040
a flavor of this approach.

00:01:43.040 --> 00:01:45.300
In a nutshell, we have a source, which is live or

00:01:45.300 --> 00:01:47.280
on demand, that provides the mezzanine

00:01:47.280 --> 00:01:50.050
content, which is supposedly the best and most

00:01:50.050 --> 00:01:51.920
crisp quality that we can offer. The

00:01:51.920 --> 00:01:54.580
mezzanine stream is fed to an encoder or a transcoder

00:01:54.580 --> 00:01:56.840
that generates a number of representations

00:01:56.840 --> 00:01:59.290
according to a preselected bitrate ladder, which

00:01:59.290 --> 00:02:01.520
is a combination of resolution and bitrate

00:02:01.520 --> 00:02:04.890
pairs. These representations are then packaged

00:02:04.890 --> 00:02:08.120
into media segments and optionally encrypted,

00:02:08.120 --> 00:02:10.620
which are then published to the origin server.

00:02:10.620 --> 00:02:12.640
Through the help of the CDN caches, media

00:02:12.640 --> 00:02:16.150
segments can be efficiently accessed by the

00:02:16.150 --> 00:02:18.880
countless streaming clients.

00:02:18.880 --> 00:02:21.680
Why do we use HTTP? Well, it has all these nice

00:02:21.680 --> 00:02:25.120
features, works on almost any device,

00:02:25.120 --> 00:02:27.560
and goes through all the nasty middle boxes

00:02:27.560 --> 00:02:29.830
without a problem. The CDNs have a huge

00:02:29.830 --> 00:02:30.560
replication

00:02:30.560 --> 00:02:33.570
capacity and offer cheap and low latency access

00:02:33.570 --> 00:02:37.160
to everybody. HTTP is an object request response

00:02:37.160 --> 00:02:40.450
protocol, but with small media pieces, it can

00:02:40.450 --> 00:02:43.280
mimic streaming very nicely. And the ultimate

00:02:43.280 --> 00:02:46.340
goal is to make the viewers happy, at which HTTP

00:02:46.340 --> 00:02:48.880
adaptive streaming does a pretty good

00:02:48.880 --> 00:02:52.370
job most of the time. But adaptive streaming is

00:02:52.370 --> 00:02:55.480
not perfect either, so bad things do happen

00:02:55.480 --> 00:02:58.960
from time to time.

00:02:58.960 --> 00:03:01.430
Here's an example showing streaming client

00:03:01.430 --> 00:03:03.600
behavior. I have been showing this plot for

00:03:03.600 --> 00:03:06.120
more than 10 years now, so you might have seen

00:03:06.120 --> 00:03:08.120
this before. There are 10 clients streaming

00:03:08.120 --> 00:03:11.500
from the same server over a 10 Mbps link. Ideally,

00:03:11.500 --> 00:03:13.720
all the clients should consistently

00:03:13.720 --> 00:03:17.980
stream from the same representation. In this case,

00:03:17.980 --> 00:03:21.480
it is the 866 Kbps representation. This

00:03:21.480 --> 00:03:23.510
way the network capacity will also be used as

00:03:23.510 --> 00:03:25.800
much as possible. However, this is not

00:03:25.800 --> 00:03:28.670
the case as you can see from the frequent upshifts

00:03:28.670 --> 00:03:30.800
and downshifts for each client. In

00:03:30.800 --> 00:03:33.810
a scenario like this, which is very common, we

00:03:33.810 --> 00:03:36.600
get either unfairness among the clients,

00:03:36.600 --> 00:03:39.680
instability for each client, or underutilization

00:03:39.680 --> 00:03:42.720
in the network. HTTP streaming traffic, which

00:03:42.720 --> 00:03:46.320
is in and off traffic, and uses a set of discrete

00:03:46.320 --> 00:03:50.200
bit rates, cannot converge to the ideal point.

00:03:50.200 --> 00:03:52.360
If you are interested in knowing more about this,

00:03:52.360 --> 00:03:54.000
we studied this problem in detail in

00:03:54.000 --> 00:04:00.740
our Nostra 2012 paper, which you can refer to for

00:04:00.740 --> 00:04:02.120
more details.

00:04:02.120 --> 00:04:04.730
Since these problems have been identified about

00:04:04.730 --> 00:04:07.080
10 years ago, we and many other groups

00:04:07.080 --> 00:04:10.880
worked on finding a solution. Several solutions

00:04:10.880 --> 00:04:12.920
with different pros and cons have floated

00:04:12.920 --> 00:04:15.550
around. Now, when it came to the solution types,

00:04:15.550 --> 00:04:18.160
there were primarily three camps. The

00:04:18.160 --> 00:04:20.380
first camp was arguing that the servers must

00:04:20.380 --> 00:04:22.760
always stay in control, and the network must

00:04:22.760 --> 00:04:25.320
support appropriate quality of service, otherwise

00:04:25.320 --> 00:04:27.360
streaming video could never be on par with

00:04:27.360 --> 00:04:31.010
the traditional cable or broadcast TV. So, their

00:04:31.010 --> 00:04:32.680
solution was to make everything more

00:04:32.680 --> 00:04:35.130
controlled with smarter and more expensive

00:04:35.130 --> 00:04:39.020
infrastructure. However, it soon became quite

00:04:39.020 --> 00:04:42.050
clear that the market has already moved on from

00:04:42.050 --> 00:04:44.200
more control on everything.

00:04:44.200 --> 00:04:47.590
The second camp was on the other extreme, argued

00:04:47.590 --> 00:04:49.860
not doing anything that will put more

00:04:49.860 --> 00:04:52.370
control on the infrastructure, but simply

00:04:52.370 --> 00:04:55.520
spending the money to improve the access capacity.

00:04:55.520 --> 00:04:57.860
In other words, the money should be spent to put

00:04:57.860 --> 00:04:59.900
more fiber under the ground and improve

00:04:59.900 --> 00:05:04.060
cellular coverage. As nice as this sounds, one

00:05:04.060 --> 00:05:05.960
thing we know for sure is that the demand

00:05:05.960 --> 00:05:09.560
for bandwidth is always more than the supply. The

00:05:09.560 --> 00:05:11.880
last camp was more pragmatic. How could

00:05:11.880 --> 00:05:14.470
we best use whatever the bandwidth or server

00:05:14.470 --> 00:05:16.960
capacity we have to meet the demand? So, the

00:05:16.960 --> 00:05:19.360
last camp brought up the idea of some sort of a

00:05:19.360 --> 00:05:21.920
control plane that might enable information

00:05:21.920 --> 00:05:24.910
sharing between the servers and clients. This was

00:05:24.910 --> 00:05:27.600
certainly an interesting idea, but bringing

00:05:27.600 --> 00:05:29.820
together the developers of all the client

00:05:29.820 --> 00:05:32.320
implementations with the content or network

00:05:32.320 --> 00:05:39.120
providers wouldn't be as easy.

00:05:39.120 --> 00:05:42.080
But we were determined. In 2013, we stirred up

00:05:42.080 --> 00:05:44.560
enough interest to have a joint IETF MPEG

00:05:44.560 --> 00:05:47.120
workshop on this subject. Different proposals

00:05:47.120 --> 00:05:49.640
were brought to the table, and the discussions

00:05:49.640 --> 00:05:52.870
led to the development of the Server-End Network

00:05:52.870 --> 00:05:55.320
Assisted DASH standard in MPEG. This

00:05:55.320 --> 00:05:57.720
standard actually covered a lot of ground and

00:05:57.720 --> 00:06:00.000
established the control plane framework

00:06:00.000 --> 00:06:03.150
we always wanted. Despite all the academic

00:06:03.150 --> 00:06:05.880
research behind it, due to various reasons,

00:06:05.880 --> 00:06:08.530
this wasn't really picked up by the industry

00:06:08.530 --> 00:06:11.000
until a number of companies wanted to do

00:06:11.000 --> 00:06:11.360
something

00:06:11.360 --> 00:06:15.430
about it in the CTA a few years later. That CTA

00:06:15.430 --> 00:06:18.180
effort first focused on the metadata information

00:06:18.180 --> 00:06:21.280
sharing from the clients toward the servers, and

00:06:21.280 --> 00:06:23.680
the spec was published last year as CTA

00:06:23.680 --> 00:06:27.210
5004, and that's called Common Media Client Data.

00:06:27.210 --> 00:06:29.600
With this completed, the CTA started

00:06:29.600 --> 00:06:32.080
working on the sister spec a few months ago,

00:06:32.080 --> 00:06:34.680
which is for information sharing toward the

00:06:34.680 --> 00:06:38.170
clients, and it's called Common Media Server Data,

00:06:38.170 --> 00:06:40.800
and it's expected to be published later

00:06:40.800 --> 00:06:44.760
this year or early next year.

00:06:44.760 --> 00:06:47.000
So what has really changed the mind of the CDN

00:06:47.000 --> 00:06:49.940
providers? They didn't get on the bandwagon

00:06:49.940 --> 00:06:52.200
a few years ago, but now they want to have

00:06:52.200 --> 00:06:55.360
something similar? Here's the deal. Whose

00:06:55.360 --> 00:06:58.340
fault is it when a user's video keeps freezing or

00:06:58.340 --> 00:07:01.040
is low quality? One can blame the device

00:07:01.040 --> 00:07:03.870
or the app or the internet connection speed or

00:07:03.870 --> 00:07:06.520
the CDN or the content provider. It's a

00:07:06.520 --> 00:07:09.040
vicious cycle that mostly ends up without a

00:07:09.040 --> 00:07:11.680
satisfactory answer, which makes us, the

00:07:11.680 --> 00:07:15.230
users, quite upset. Fault isolation is very

00:07:15.230 --> 00:07:17.800
important for keeping the paying customers,

00:07:17.800 --> 00:07:20.470
and it requires analytics data from various

00:07:20.470 --> 00:07:22.760
points along the delivery pipeline. There

00:07:22.760 --> 00:07:25.000
are many proprietary end-to-end analytics

00:07:25.000 --> 00:07:27.480
solutions today, but surprisingly, the CDNs

00:07:27.480 --> 00:07:31.180
are quite blind to all of this. CDNs see the

00:07:31.180 --> 00:07:34.080
requests and send the responses, but they

00:07:34.080 --> 00:07:37.150
don't have the glue to connect all the pieces

00:07:37.150 --> 00:07:39.720
together to get the full picture and identify

00:07:39.720 --> 00:07:43.060
how well things are working or not. The solution

00:07:43.060 --> 00:07:47.240
is quite straightforward though. If with each

00:07:47.240 --> 00:07:49.750
request the client sends some identifiers and

00:07:49.750 --> 00:07:52.000
status information, the CDNs suddenly

00:07:52.000 --> 00:07:55.150
gain visibility into the media analytics. See

00:07:55.150 --> 00:07:57.200
this new paper from friends of mine to

00:07:57.200 --> 00:08:02.120
explore how powerful CMCD reporting could be.

00:08:02.120 --> 00:08:06.290
Here's a list of things a client can send

00:08:06.290 --> 00:08:09.880
information about. Even with a unique session

00:08:09.880 --> 00:08:13.030
ID sent with each request, the CDNs can now group

00:08:13.030 --> 00:08:15.960
the requests per playback session, which

00:08:15.960 --> 00:08:18.930
is already a big improvement over today's CDNs'

00:08:18.930 --> 00:08:20.920
capabilities. Sending a deadline might

00:08:20.920 --> 00:08:23.350
allow for getting the response with a higher

00:08:23.350 --> 00:08:27.680
priority, reducing the risk for video stalling.

00:08:27.680 --> 00:08:30.980
For example, see our non-stop paper this year on

00:08:30.980 --> 00:08:33.960
the subject. Another use case is hints

00:08:33.960 --> 00:08:36.810
about the next request. The CDN may reduce the

00:08:36.810 --> 00:08:39.120
fetch time for the clients by using that

00:08:39.120 --> 00:08:43.000
information. On the other hand, the CMSD work is

00:08:43.000 --> 00:08:45.080
only a few months old, and there are already

00:08:45.080 --> 00:08:48.160
a number of use cases described by the working

00:08:48.160 --> 00:08:50.320
group. As you can see from the list, there

00:08:50.320 --> 00:08:53.940
are many ways the CMSD can help with, or many

00:08:53.940 --> 00:08:57.290
problems the CMSD can avoid, which would

00:08:57.290 --> 00:08:57.560
otherwise

00:08:57.560 --> 00:09:00.600
be very difficult to resolve. The work is still

00:09:00.600 --> 00:09:02.800
ongoing. If you're interested, please

00:09:02.800 --> 00:09:06.600
consider participating in the effort.

00:09:06.600 --> 00:09:08.760
Developing or writing a spec is usually the

00:09:08.760 --> 00:09:11.080
easiest part. We hit the SEND standard, but

00:09:11.080 --> 00:09:14.440
it was not widely adopted. To get better adoption

00:09:14.440 --> 00:09:17.040
with the CMCD and CMSD, all of us working

00:09:17.040 --> 00:09:20.010
in this industry need to work together. We all

00:09:20.010 --> 00:09:22.280
agree that information exchange is useful

00:09:22.280 --> 00:09:24.760
when the information is relevant and actionable.

00:09:24.760 --> 00:09:27.320
The information also needs to be fresh. There

00:09:27.320 --> 00:09:29.800
are already a number of CDNs and clients

00:09:29.800 --> 00:09:33.030
supporting CMSD, so for example, grab the latest

00:09:33.030 --> 00:09:33.320
HGS

00:09:33.320 --> 00:09:36.660
code, start experimenting yourself, and come up

00:09:36.660 --> 00:09:39.080
with how CMCD or CMSD can help in your

00:09:39.080 --> 00:09:42.230
environment. Both have extension mechanisms, so

00:09:42.230 --> 00:09:44.320
extending the functionality is pretty

00:09:44.320 --> 00:09:45.520
straightforward.

00:09:45.520 --> 00:09:47.700
And most importantly, join the effort and

00:09:47.700 --> 00:09:50.160
contribute. Review the use cases, propose

00:09:50.160 --> 00:09:51.960
new ones, and so on.

00:09:51.960 --> 00:09:55.360
With this, I provide a slide here with some

00:09:55.360 --> 00:09:58.280
useful links for your reference.

00:09:58.280 --> 00:10:00.780
And thanks for listening, and I hope those of you

00:10:00.780 --> 00:10:02.840
who are interested in streaming stuff

00:10:02.840 --> 00:10:05.720
and other multimedia systems topics can attend ACM

00:10:05.720 --> 00:10:08.160
Multimedia Systems Conference in person

00:10:08.160 --> 00:10:11.200
or virtually at the end of September. Thank you.

